(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    329904,       6139]
NotebookOptionsPosition[    316480,       5922]
NotebookOutlinePosition[    317452,       5952]
CellTagsIndexPosition[    317409,       5949]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Investigating Pattern Periods in the Diagonals of the Rule 45 Cellular \
Automaton\
\>", "Title",
 CellChangeTimes->{{3.770055572438499*^9, 3.7700555729498453`*^9}, {
   3.770055604008165*^9, 3.7700556066618843`*^9}, 3.7715455947180405`*^9, 
   3.7717555898139563`*^9, 3.7719018501142607`*^9, 
   3.7719019602845726`*^9},ExpressionUUID->"80376cd3-4841-451d-969b-\
167a32f109e1"],

Cell["Aniruddh Sriram", "Text",
 CellChangeTimes->{{3.549624168509506*^9, 3.549624171985794*^9}, {
  3.549624508772977*^9, 3.549624510775043*^9}, {3.5498187159613867`*^9, 
  3.5498187170087957`*^9}, {3.549819049020514*^9, 3.5498190533440437`*^9}, {
  3.77005561844785*^9, 3.7700556489651537`*^9}, {3.771755593769676*^9, 
  3.771755595567602*^9}},ExpressionUUID->"9a30e7bc-f63e-436b-be7b-\
a320f62675c5"],

Cell["Mentor: Nikki Sigurdson", "Text",
 CellChangeTimes->{{3.549624515773694*^9, 3.5496245246892014`*^9}, {
  3.5498187208956137`*^9, 3.5498187221413403`*^9}, {3.5498190558319674`*^9, 
  3.54981906151682*^9}, {3.770055624686027*^9, 3.770055659820487*^9}, {
  3.771755597781593*^9, 
  3.7717556045696273`*^9}},ExpressionUUID->"6ba6d97e-b3e8-4f04-b605-\
57ecc6147ef7"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Project Title & Description", "Chapter"]], "Section",
 CellChangeTimes->{{3.771236203875661*^9, 
  3.7712362221846547`*^9}},ExpressionUUID->"b1ced785-4242-4ede-846d-\
fa9507ada865"],

Cell[CellGroupData[{

Cell["\<\
Analyzing Diagonal Patterns in the Rule 45 Cellular Automaton\
\>", "Subsubsection",
 CellChangeTimes->{{3.77123624162768*^9, 
  3.771236261307045*^9}},ExpressionUUID->"a4b82734-b453-42b7-8dc1-\
ae0a4f46a3aa"],

Cell["\<\
In this investigation, we examine the repetitive character of diagonal cells \
in the rule 45 elementary cellular automaton. It is clear that along the left \
edge of the automaton, a pattern exists as the cells progress diagonally \
downward. By moving further to the right and studying subsequent diagonals, \
the patterns detected exhibit increasing periods. This phenomenon is seen in \
the rule 30 cellular automaton as periods appear to generally increase \
exponentially with increasing depth. This period doubling is truly an \
interesting occurrence, and we study the existence of similar repetitive \
behavior in rule 45. To analyze the patterns for especially longer sequences \
of cells, we devised an efficient algorithm for detecting patterns and their \
periods in the diagonals. After extracting long sequences of diagonal cells \
with increasing depth, we employ an algorithmic approach to evaluate the \
changes in period and examine this data to detect order in the increasing \
pattern periods.\
\>", "Text",
 CellChangeTimes->{{3.771236266301731*^9, 3.7712363010358543`*^9}, {
  3.771236464558734*^9, 3.771236503851491*^9}, {3.7712365343472185`*^9, 
  3.7712366102632294`*^9}, {3.7712366736208076`*^9, 3.771236928873736*^9}, {
  3.771236974997312*^9, 3.7712370275038705`*^9}, {3.7712371110538797`*^9, 
  3.7712371397786474`*^9}, {3.7712371715827355`*^9, 3.771237285186837*^9}, {
  3.771237395446003*^9, 3.7712376323728795`*^9}, {3.7717746436762037`*^9, 
  3.771774649870103*^9}, {3.7717747304713917`*^9, 3.7717747359706483`*^9}, {
  3.771774795853456*^9, 3.7717747990494957`*^9}, {3.771774839773118*^9, 
  3.7717748473081355`*^9}, {3.771774945827589*^9, 3.7717749465971994`*^9}, {
  3.7717749866930084`*^9, 
  3.7717750263899927`*^9}},ExpressionUUID->"edaf1195-74f4-4e07-8647-\
583c3e762a21"],

Cell["\<\
This is the rule icon for rule 45. Each neighborhood configuration is mapped \
to a black/white cell for the next generation.\
\>", "CodeText",
 CellChangeTimes->{{3.7717553573628273`*^9, 3.7717553648969603`*^9}, {
  3.7717554162371254`*^9, 
  3.7717555018219566`*^9}},ExpressionUUID->"6e3a55d2-14fd-4513-933e-\
4f03c03c7e3d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RulePlot", "[", 
  RowBox[{"CellularAutomaton", "[", "45", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.771707769490969*^9, 3.771707780166162*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"31b1930d-8b9e-4ad2-83d4-dde71681d073"],

Cell[BoxData[
 GraphicsBox[{{InsetBox[
     GraphicsBox[{
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], RectangleBox[NCache[{Rational[-3, 2], 0}, {-1.5, 0}]]}, 
        {GrayLevel[0], RectangleBox[NCache[{Rational[-1, 2], 0}, {-0.5, 0}]]}, 
        {GrayLevel[0], RectangleBox[NCache[{Rational[1, 2], 0}, {0.5, 0}]]}}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], 
         RectangleBox[
          NCache[{Rational[-1, 2], Rational[-5, 4]}, {-0.5, -1.25}]]}}},
      PlotRange->NCache[{{-2, 2}, {
          Rational[-7, 4], 
          Rational[3, 2]}}, {{-2, 2}, {-1.75, 1.5}}]], 
     NCache[{0.6153846153846154, Rational[1, 2]}, {0.6153846153846154, 
      0.5}], {Center, Center}, {1.2307692307692308, 1}], InsetBox[
     GraphicsBox[{
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], RectangleBox[NCache[{Rational[-3, 2], 0}, {-1.5, 0}]]}, 
        {GrayLevel[0], RectangleBox[NCache[{Rational[-1, 2], 0}, {-0.5, 0}]]}, 
        {GrayLevel[1], RectangleBox[NCache[{Rational[1, 2], 0}, {0.5, 0}]]}}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], 
         RectangleBox[
          NCache[{Rational[-1, 2], Rational[-5, 4]}, {-0.5, -1.25}]]}}},
      PlotRange->NCache[{{-2, 2}, {
          Rational[-7, 4], 
          Rational[3, 2]}}, {{-2, 2}, {-1.75, 1.5}}]], 
     NCache[{1.8461538461538463`, Rational[1, 2]}, {1.8461538461538463`, 
      0.5}], {Center, Center}, {1.2307692307692308, 1}], InsetBox[
     GraphicsBox[{
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], RectangleBox[NCache[{Rational[-3, 2], 0}, {-1.5, 0}]]}, 
        {GrayLevel[1], RectangleBox[NCache[{Rational[-1, 2], 0}, {-0.5, 0}]]}, 
        {GrayLevel[0], RectangleBox[NCache[{Rational[1, 2], 0}, {0.5, 0}]]}}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], 
         RectangleBox[
          NCache[{Rational[-1, 2], Rational[-5, 4]}, {-0.5, -1.25}]]}}},
      PlotRange->NCache[{{-2, 2}, {
          Rational[-7, 4], 
          Rational[3, 2]}}, {{-2, 2}, {-1.75, 1.5}}]], 
     NCache[{3.076923076923077, Rational[1, 2]}, {3.076923076923077, 0.5}], {
     Center, Center}, {1.2307692307692308, 1}], InsetBox[
     GraphicsBox[{
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], RectangleBox[NCache[{Rational[-3, 2], 0}, {-1.5, 0}]]}, 
        {GrayLevel[1], RectangleBox[NCache[{Rational[-1, 2], 0}, {-0.5, 0}]]}, 
        {GrayLevel[1], RectangleBox[NCache[{Rational[1, 2], 0}, {0.5, 0}]]}}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], 
         RectangleBox[
          NCache[{Rational[-1, 2], Rational[-5, 4]}, {-0.5, -1.25}]]}}},
      PlotRange->NCache[{{-2, 2}, {
          Rational[-7, 4], 
          Rational[3, 2]}}, {{-2, 2}, {-1.75, 1.5}}]], 
     NCache[{4.307692307692308, Rational[1, 2]}, {4.307692307692308, 0.5}], {
     Center, Center}, {1.2307692307692308, 1}], InsetBox[
     GraphicsBox[{
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[NCache[{Rational[-3, 2], 0}, {-1.5, 0}]]}, 
        {GrayLevel[0], RectangleBox[NCache[{Rational[-1, 2], 0}, {-0.5, 0}]]}, 
        {GrayLevel[0], RectangleBox[NCache[{Rational[1, 2], 0}, {0.5, 0}]]}}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], 
         RectangleBox[
          NCache[{Rational[-1, 2], Rational[-5, 4]}, {-0.5, -1.25}]]}}},
      PlotRange->NCache[{{-2, 2}, {
          Rational[-7, 4], 
          Rational[3, 2]}}, {{-2, 2}, {-1.75, 1.5}}]], 
     NCache[{5.538461538461538, Rational[1, 2]}, {5.538461538461538, 0.5}], {
     Center, Center}, {1.2307692307692308, 1}], InsetBox[
     GraphicsBox[{
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[NCache[{Rational[-3, 2], 0}, {-1.5, 0}]]}, 
        {GrayLevel[0], RectangleBox[NCache[{Rational[-1, 2], 0}, {-0.5, 0}]]}, 
        {GrayLevel[1], RectangleBox[NCache[{Rational[1, 2], 0}, {0.5, 0}]]}}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], 
         RectangleBox[
          NCache[{Rational[-1, 2], Rational[-5, 4]}, {-0.5, -1.25}]]}}},
      PlotRange->NCache[{{-2, 2}, {
          Rational[-7, 4], 
          Rational[3, 2]}}, {{-2, 2}, {-1.75, 1.5}}]], 
     NCache[{6.76923076923077, Rational[1, 2]}, {6.76923076923077, 0.5}], {
     Center, Center}, {1.2307692307692308, 1}], InsetBox[
     GraphicsBox[{
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[NCache[{Rational[-3, 2], 0}, {-1.5, 0}]]}, 
        {GrayLevel[1], RectangleBox[NCache[{Rational[-1, 2], 0}, {-0.5, 0}]]}, 
        {GrayLevel[0], RectangleBox[NCache[{Rational[1, 2], 0}, {0.5, 0}]]}}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], 
         RectangleBox[
          NCache[{Rational[-1, 2], Rational[-5, 4]}, {-0.5, -1.25}]]}}},
      PlotRange->NCache[{{-2, 2}, {
          Rational[-7, 4], 
          Rational[3, 2]}}, {{-2, 2}, {-1.75, 1.5}}]], 
     NCache[{8., Rational[1, 2]}, {8., 0.5}], {
     Center, Center}, {1.2307692307692317, 1}], InsetBox[
     GraphicsBox[{
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[1], RectangleBox[NCache[{Rational[-3, 2], 0}, {-1.5, 0}]]}, 
        {GrayLevel[1], RectangleBox[NCache[{Rational[-1, 2], 0}, {-0.5, 0}]]}, 
        {GrayLevel[1], RectangleBox[NCache[{Rational[1, 2], 0}, {0.5, 0}]]}}, 
       {EdgeForm[GrayLevel[
         NCache[-1 + GoldenRatio, 0.6180339887498949]]], 
        {GrayLevel[0], 
         RectangleBox[
          NCache[{Rational[-1, 2], Rational[-5, 4]}, {-0.5, -1.25}]]}}},
      PlotRange->NCache[{{-2, 2}, {
          Rational[-7, 4], 
          Rational[3, 2]}}, {{-2, 2}, {-1.75, 1.5}}]], 
     NCache[{9.230769230769232, Rational[1, 2]}, {9.230769230769232, 0.5}], {
     Center, Center}, {1.23076923076923, 1}]}, 
   {GrayLevel[
    0.8], {LineBox[{{0, 0}, {0, 1}}], 
     LineBox[{{1.2307692307692308`, 0}, {1.2307692307692308`, 1}}], 
     LineBox[{{2.4615384615384617`, 0}, {2.4615384615384617`, 1}}], 
     LineBox[{{3.6923076923076925`, 0}, {3.6923076923076925`, 1}}], 
     LineBox[{{4.923076923076923, 0}, {4.923076923076923, 1}}], 
     LineBox[{{6.153846153846154, 0}, {6.153846153846154, 1}}], 
     LineBox[{{7.384615384615385, 0}, {7.384615384615385, 1}}], 
     LineBox[{{8.615384615384617, 0}, {8.615384615384617, 1}}], 
     LineBox[{{9.846153846153847, 0}, {9.846153846153847, 1}}]}, {
     LineBox[{{0, 0}, {9.846153846153847, 0}}], 
     LineBox[{{0, 1}, {9.846153846153847, 1}}]}}}]], "Output",
 CellChangeTimes->{3.771707780975466*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"3254a8ab-9d59-4bf1-8650-d72d11e11ea7"]
}, Open  ]],

Cell["\<\
Below is a visual representation of the first 100 generations of the rule 45 \
automaton (given initial conditions of one black cell in a background of \
white cells):\
\>", "CodeText",
 CellChangeTimes->{{3.771755228033791*^9, 3.7717552958790064`*^9}, {
  3.771758186641697*^9, 
  3.7717581998950996`*^9}},ExpressionUUID->"485f9bb1-87f1-402b-9e77-\
93a19c1b0046"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", 
  RowBox[{"CellularAutomaton", "[", 
   RowBox[{"45", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "1", "}"}], ",", "0"}], "}"}], ",", "1000"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.771251337656226*^9, 3.771251375678504*^9}, {
   3.7712905376314745`*^9, 3.771290538051886*^9}, {3.77141690708743*^9, 
   3.771416907183179*^9}, {3.771417095713357*^9, 3.7714170958120923`*^9}, {
   3.771693724564826*^9, 3.771693724888867*^9}, {3.77169633322184*^9, 
   3.7716963333999696`*^9}, {3.771707868489175*^9, 3.771707868660633*^9}, {
   3.7717531230026007`*^9, 3.7717531247921424`*^9}, {3.7717531635986958`*^9, 
   3.771753164277811*^9}, {3.7718105649198513`*^9, 3.771810580922064*^9}, {
   3.7718113014200172`*^9, 3.771811331947293*^9}, 3.7718689333476567`*^9},
 CellLabel->"In[57]:=",ExpressionUUID->"d983f915-0b0f-4c73-867a-341d536a3792"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
LoVkNtHaHpfFjwNEFcltwgG2OBBE/2Y5lQ9bcof+2rFnzO5+XTCUyVtkoH6y
p6Yl1BHC0zpffHHdKA0/QCTxxu/Xt/QXNS95jYjumNoDLkQwvIomr86ZWmD+
yYKsnkAnNrE2bg77qBk1MmbVNSoqhI8R8uXXv/F5f/o5VgT7zdivGZOd92Kv
wp8V243BOPHqzTML++qTuBuGhDaKxi/vA/xOH44CLLC4MmSe0rqLO/ac9nd2
Jk6GVRemKmmo/L41rbPuRL9oE60cr4JU/lp97H3tr/0IVsaZlWlHgKQGlV/8
51wKjMLUnCwnqwKR3KAmbaeJzCIXnyYzw6l82CL55ip2PBl+tnpsUutMIdAg
4iyHUMlRUHpCC0hpr8qCtTfeRExY059q7Q8uyBFcIafVMBQPVzenkWHBCBkc
c8IEq02hGlrCpqHvSpW5O6bqWqAmHo7r4d//zJ9+vENiqNIhgyztZ81ZeVmx
Uj3oS0myuNcRnicTJ3g6XWpycdQIAnf6uE3vj9PDGpvS+mNshjyZOOxheNsW
PiVdBT9vSdbGMP48SjYOnywcQZpXrE7b3DW5JfgF6lf4wEZ+iaS6Ne94YIcx
loMC3lo7qoApiJxGjp3RofzZJKz9qPxu64eRYwciKfnO6Dq0pqvMzee9dvId
0E8va8AiS+Z0WasSApaxdv8B53R+1IrUOSkj72FR+6X8ESa1BT+hPmQMYz3n
N4ik8GiYEtfNMK46FF2fYD0huyaWY/rLr3/n8/78M5n6V7e5ZpAhV1DsNe6s
eJFqv79T8libFLjrBg+nUfF45o2zhAcUTrtM9lpBhmOswfo59rf9XEcmjkbm
vXu0C0HsK/QaYQx3bFoM2icLNy8CejTcX9/LMMaJBaV+GGthM79E2+9RUA/G
CwBjn1oMwgxz5BJ7L98u9G2ip4S//R2N3o/KuxMFU7R2rK5Ml+Zj056wdwai
LnYro/1Yz3W5QGJqkXyfXqUWOczndu4RBWyqFhJRLiY4V1s1etaK+U6zzGbW
OSqcYNpJg+OwqZ1wYHeEUB2KmgkaPlGJiVR+z/788rc+8+efTP2rRqTDfhX6
tYapA1Gj6Q7h/VgTqLyr1NiTb2gT0RjPZpzczsjv9ue/ZvW5mTcinrEfQ3E9
qcVihiJcCR49XchwX6F/tW1OjgXstH9+gMpxxEdh835OJRV7LsgqITki1Tvn
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
Z3/bc7CEu4j9KF88w0pVVVX0e2T+OUpURSAkkQJiES2vOZemmQSDT+p8UBzU
IbnsHYYq4+8rztV4w1uQqj+npYMnWr+li1xbCP7u4LCo+Vj1s9Zx+QxXalkv
EFD17QWp/GjebJIO/X70lTcKsuWdtBIQ59uTKERNweTQEajuKHYAtQhoLhFV
eK1LCdF4XWlIpCa90t/ROBVpVIE23C8ImaF6CjVho8443QUeO5rsd9rb/5Xy
abaeRcWG8JCaTe/uPYQGK7lsatQOVLbYX/TMb3tsGbhL+B3lb3+LFVSFKnAy
kjwlyMe2XadKRePXmJzayzcRQgPncdPnu2tb77Oj77v6jMZb3pqkT58CKcOO
xkppWV9puHt/NP9Uvas6Hi5gvhIkhG+h4luBNH09d175OLzLnuQag+pwsJve
kjTEMInS/cC1IXIEOrpDhsEbO3au8EEsRZSh4oTZeKBKw5ijY9QfUA7GmV/a
6KGSM3RYWgjbYxqMt979OEE0zN4BYHHY3NL0LPpZnKy5S+88h/hNy8IMahcq
LPY3Pfv7nk+7b7++/6gbpPxorkaOQlCVJFi7brmjRLOp2p5PXyXTVbdc2O6e
pE5NE4n3/n1s++xzM3A7O+PprZw0k2SZosXpUetmjJd2WsJBwHV1BUkdqrRS
/mTL0wr7dFDogycPWQBuBzuUxNGg53DlhHevKrQVyHe0TA9MWqIL5oB2GXYk
JuBDFdF775Xrs7YibzV9lU2rveM0FFOGgKsYe4TBq1QUdU2D8V7hM1qHZ4fV
QHRWs/F6WruSOqZcSlTnOnQOd+1IVahdqHLhb3vm9z22zPfeG7Ct/Jrwc6YS
XfHO8bydl+4opkJK22hz1HQzihIrh84kZEek/rppO938eB9MWYFHd52DpLGT
CIDpfpw+ErfvQnRrXA4+MLh6gVZEANhQrpzezJieCcIiCp4YMlTt2+G1p/5m
zh5WWhW/59vhG9Y5BaGCJYxlRt1h7O7YMvCxXYNzZVRC7CYee1BjdSz1N760
yJa7mI5DIkdw4a6wJN0fPfBHN+toDC95S7/uzFSsV2TEjjQ7mrT0LqvV2w9f
7ZoKdua98Lc9+xufhsqnMxKV8j8HnTnlA8kdowwE3RISfNtOo8h2g3cSK6U8
ibIDB63GbIV9hwncxVyrpH+aNhnkpCqd0g6IV+KAnqpz0nK89K3eAlrQk7oc
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
Y1ZppDRO0N6Eg9qSO5yYOwNUeNeR9/pT1rzESrG1Uh9ft++eeF5ATZv2kkFI
YrsJlvtE7dOhlxLuA6OnjcTF6vXG1O8amibAoZ8a/0yQmh3trte+4miAnCLP
E3ZyVPocAluq8Z1RqnEcIfNQ0+BhaQ9GlHmqmcsl1ZNySRJUvoAagF+y3TMQ
emVYA6GM1aOn3Ehtqdg6m6dYqWJ0q7MKkjQi+y37oQrj59nCI8lubKx8Po68
15+y9jXWI5SPX58/lmr/3CHkbmsesJkMB0naPgXPFLVLkcvipYT6oN9DkF5N
g/SWLS7NcaF4RD83fjX4FQbvcPAVYxcr58Zs9TQWemt56FkmqUAYjpo9FlKT
5rCmkIeY4OrUA0q2Evb549HiAqoFoCSfM4fQmlfdWPg7ESc3JL7jwnOhVdKb
WgPOP84SpNJIR5zKTM2jydmiR8gMNBTqV0fe6w9Z8xrLRfsZ15bnHw8ucmnQ
gs0VTn+rKRYutTMXi+7Qp57k0ooO9B4XORnFGy31eNoL0rOrByWfehezxuAz
HPLzqS6iZPTrYbCgcPJBQ4iUjHzskRwmyis0cgz3TcM50+Eyjcurg9LpCrAW
T5ar1l4vToJkS35nHkzNVKjoGzFz5qrIGEHEaT0f3VpDDfKmUR2hykxo1kQW
dIdlxpE9PtuR9/pj1r7IKmseUYnneiX53ArgRmBrhZscCwkAD50JxN2hTz2p
S/s90KMlSmVBU93ldopnHNuGSxyaIE8Y3MVZ8cR1Ebe2vE61AOJsOWhEGaXE
PuY0hw+AniCXCxuT+VKVlvueLhcTPVaqYLVADF+iJHNGSZUtCqTzwFBurak+
M3Ca2u5sWKNtTA/rRi35LuUrVaA0JjS5fiyQpVWs8rc+25FfduZ7/WtrXmTB
M1gAJW5hnwZ199ByeTehKUx4oXaM3UALdbeAPZVv6KmD2yEPu/L/tpMQWJ6W
aUWLnm+MFcmG4vQ+F0alrADVLz4GXlHByhQFihYZfJiARVMyW+9LaFPsIXP9
vJdPobkC1sMS2TlZ1yXinMI8SZ25hhP02h3F2vocYiK17IyZSpdK3GfdqPA7
EMhXu+G2R7aoYfi7WWqsY38Lfrfee/1Z6wvtv+v6CMYkW7WICls98hm/mgwD
E1JiyIQ/bVbsPowu2n7aPV8+RI/0U5cFC3UmqKGd1ggsTwO8ssTPJ/Ko27my
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
Mq+67woFx75Y5QJ915nXin2wJieg91whifaNMe/A/HJi7gBx+2OakhK9t0lT
EXWscuEqGs68psynYgYVMb+c2hjzPiyqKeZqts4MGmiGL5xX1VWNdRTXTOIV
nXlF1s4Dx7CJwEs4tTHmbVhUU8zVlK9m1iK6zVgGqxpx1GEcHGdepWREy3Bq
T57aGPNGrCsr5lokBJecPEXZ+6rGOuo4DI4zr1wn0zKcTDajzt8Y8x6sKyvm
WpCaJHPykEymr2rkxr7K5XHmNR8O5AKZOsbjyJi3Y1VRMZczunN72h9SZHnb
Q1Y1SgAv//5p5jWliZAXtTIsecPGmD+wpqSYG5AVMKNvU/S8r43sAXy2Vw4z
r9Ga4BRqqwzGmHdjejUxt/H0WvfDxji80mdetQl9sVcGY8ybsbCumItB3P7X
te61cax5jLb7ceZVSgLFvlcGY8zbsbCumKvZOvSpte6JqCW5sObHmVeUhGoH
6l+VYfrbNMY8wcK6Yq4mn1zrvm9NWG+J5B9nXmt1ZQTbTv7sEWTMe7KurJjr
eXate0DgdRI2DjOvOLDsfURKVSiPb4x5R1YVFXMHJcgVvv/vWvfSapmEbTOv
41j9iZWDOb7HjzFvy5qSYm5idOn2tD9wnUxLXFKtNzOZkvJa5i4/lXEv9+7h
Y8xbs6CemPtoMcvWvykJui5/VOt9nHnltCy2yQeaao1MhTvGmHdkSUUxt/H0
WvdmvaPNvHJadrSY+LH+IUtyjDFvyZqSYu7i+bXuOq8qM68Sv8iieEh/YI2M
x44xb83CumLuYOvUp9a667yqzLxK/DJa1PXxIfJvjHljFtYVcwfPrnXv86o6
8yqOPaLKhCyakWUzxpi3ZWFdMbfw7Fr3Pq8qiq+OHdk7XD1DG2PMO7O0spgb
eHqte59XhcvX/Zm9Y6YVoY0x5q1ZVFPMfYxu3Z72h5/Wuh/nVbGN+zOrz6Ss
p4eNMZ/AioJibuXJte6HeVWsnOH+mr3LYPH6dmM+gTUlxdzJk2vdofk1jSor
HSW20SWT9YIx5u1ZWFfMTTy11l1T9vrIaR72D32dq2eWvCljzO9YW1rMLWwd
+5e17pKy11L2aPtL9i4C7/XtxnwIa0uLuYWn1rozga817LL/Pjb0da6eMcZ8
AisLi7mLp9a64+sEahiEvsLlMk34PWCM+RAW1RRzK8+tdWcKUxu5ckaXy2TC
zHu8GPMpTK8mZgaja7en/eFhrbumNpWl419VE/iZJg8XYz6L6dXEzOCZte5B
UUcAX/9CWFN1IUTojTEfwKqiYu7lmbXuyQlSuHeOCZQHXURpjPkUVhUVcy9/
X+u+7ZW1wjHbHCtXReqXEKx7N8aYX7OmpJjb2Tr3j2vd6/OomereofZjeIi1
N8Z8EGtKirmdJ9a662eU6N75MVYUBwQ2xpiPYWllMTfyt7Xu7bNLmaL8/GCT
zqoaYz6KhXXF3Mrf1rrzM0r8uBIMPqJ2Zu7GmI9ifjkxkxjduz3tD32tOxdF
cjU7DD7WzegCGmPM5zC/nJhJ/HmtO1dL8kcWA36wiQtojDGfxMrCYu7lj2vd
26JIrGaP4webMr2+3ZiPZGFdMTfz57XuMnNa2U0NCVka6fXtxnwoi2qKmcHW
wT+vdR+b8JEleTV1aaTXtxvzoawoKGYSf1rrLjOnKbu3DzbRxRtjPo21pcXc
y5/WusOzcwwcP9jk9e3GfC5LK4u5mf9f6y4fQcXOjx9s8vgw5mNZV1bMBEYX
b0/7Qzly+QiqrICvEcHvljHGfCZrSoqZxP+sdW8fQa1XHz/Y5NFhzOeyqqiY
OfzPWnf9CGrA2csHm3oYb4z5OBbWFTOBH9e6t0+eVjIjH2ySJTbGmA9ldXEx
N7N18mGtu3wElZ9nkg828cOpxphPZXVxMTfzsNZdP4KaiGv4wSZZQGmM+VwW
1xZzO8e17rJ4XeKa4O6Rsosx5kNZWlnMBB7WusvKdiyIxIdU8b0DxpjPZllV
MbMY3bw9jU6v9e78wjC8kulhYcw3sKakmIk8rHXHunZ+DeTDd/4aYz6cNSXF
zKSvdef3DMgXhtHCp9e3G/MVLKkoZip9rTu+Z0C+MEy/89djwpivYE1JMVPZ
Ohpr3aPPoQZWRjJ2N8Z8PEsqipmLrnXH3+too4CTqR4RxnwHSyqKmYysda/v
DDsMAl05Y4z5AhbUEzMdXevOP8PBJZG6csYY8xUsqypmJqOr9yd8yQz+T/4Z
D2PMd7CurJiJtLXu208SwWMPjwZjvofVxcXMQde6p8Tvsj7Sebsx38Ti2mIm
0da6S/yuf4dp9TUaYy5kYV0xM9k6u4L35Df86t9hMsZ8D8uqipmLrHVn/H74
O0zGmO9hdXExs8D3tEv8fvw7TMaYr2F1cTGzwPe0J7OZ499hMsZ8DQvripkL
uhvZzOPfYTLGfAtLK4uZCdax1xqZh7/DZIz5HlYXFzMPnUWtb5PZXl99YcaY
61ldXMw8+OeW8M2Q4fXtxnwpi2uLmcnW4fiGSMlmjDFfx9rSYqaSlPbUbMYY
832sLi5mJljrjsjdA8CYL2V1cTEzSVncHu5/Y76ZpZXFzEa63N1vzFeztLKY
2XCtu7+/3ZjvZnVxMXPhWnevbzfmq1ldXMxcZK27+96Yb2Z1cTGT2Trd399u
zNezuriYyaR+jMkY87WsLi5mNrLW3RjzvawuLmY2stbdGPO9rC4uZjrudmP+
BVYXFzMdr2835l9gdXEx83GnG/MP8B+tXH/A
   "], {{0, 0}, {1501, 1001}}, {0, 1}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{851., Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{{3.771251358674969*^9, 3.771251378640617*^9}, 
   3.771290542013258*^9, 3.7714169091210685`*^9, 3.7714170974546986`*^9, 
   3.7716937256420703`*^9, 3.771696336699057*^9, 3.7717078719240856`*^9, 
   3.7717531348612947`*^9, 3.7717531651966677`*^9, {3.7718105695753922`*^9, 
   3.7718105825875745`*^9}, {3.7718113123050313`*^9, 3.7718113343518305`*^9}, 
   3.7718689366104546`*^9, {3.7718724935777345`*^9, 3.7718724974283886`*^9}},
 CellLabel->"Out[57]=",ExpressionUUID->"bbaeec2b-da65-4cb9-bf59-78a7fea42ca8"]
}, Open  ]],

Cell["\<\
Closeup of the first 20 generations. Notice the first diagonal of slope 2 \
along the left side, exactly along to the right side of the red arrow.\
\>", "CodeText",
 CellChangeTimes->{{3.7718114464687605`*^9, 3.7718114696113358`*^9}, {
  3.771811954283425*^9, 
  3.771811962134719*^9}},ExpressionUUID->"d242896d-9edd-485b-b2ed-\
d21158533010"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", 
  RowBox[{
   RowBox[{"CellularAutomaton", "[", 
    RowBox[{"45", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", "0"}], "}"}], ",", "20"}], "]"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "All"}], ",", " ", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Red", ",", 
      RowBox[{"Thickness", "[", "0.01", "]"}], ",", 
      RowBox[{"Arrow", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"10", ",", "21"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}], "}"}], "]"}]}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.771811347025092*^9, 3.771811378978529*^9}, {
  3.7718114772164893`*^9, 3.7718115122221375`*^9}, {3.7718115521337123`*^9, 
  3.7718115615801497`*^9}, {3.771811598240986*^9, 3.7718116004852457`*^9}, {
  3.771811636025332*^9, 3.7718116764985657`*^9}, {3.7718117580711746`*^9, 
  3.7718119408380146`*^9}},
 CellLabel->
  "In[705]:=",ExpressionUUID->"e9b1bb08-b70e-4d45-8469-7dabf6b8bdb9"],

Cell[BoxData[
 GraphicsBox[{RasterBox[CompressedData["
1:eJxtUMkRAjEMk+iBN0NLlLAN0P+PDbFk7SaZHL4UWX4f38/xAPA8zwtjcWzO
+3zLZUQIKCW3DMoaxdP9PxWXNUlmgT9Gk1YeMAO7ETjfDEXr9t2ICtVz54PB
7Uu7qQurn1ssHDW6tcdE0rX2mEMUtnYysGIJ7Ym9UPZg7ujUvkOn9g06te/Q
vDgL+qZ3Qa+8Y/0AZkUDHw==
    "], {{0, 0}, {31, 21}}, {0, 1}], {
    {GrayLevel[
      NCache[-1 + GoldenRatio, 0.6180339887498949]], 
     StyleBox[
      LineBox[{{{0, 21}, {31, 21}}, {{0, 20}, {31, 20}}, {{0, 19}, {31, 
       19}}, {{0, 18}, {31, 18}}, {{0, 17}, {31, 17}}, {{0, 16}, {31, 16}}, {{
       0, 15}, {31, 15}}, {{0, 14}, {31, 14}}, {{0, 13}, {31, 13}}, {{0, 
       12}, {31, 12}}, {{0, 11}, {31, 11}}, {{0, 10}, {31, 10}}, {{0, 9}, {31,
        9}}, {{0, 8}, {31, 8}}, {{0, 7}, {31, 7}}, {{0, 6}, {31, 6}}, {{0, 
       5}, {31, 5}}, {{0, 4}, {31, 4}}, {{0, 3}, {31, 3}}, {{0, 2}, {31, 
       2}}, {{0, 1}, {31, 1}}, {{0, 0}, {31, 0}}}],
      Antialiasing->False]}, 
    {GrayLevel[
      NCache[-1 + GoldenRatio, 0.6180339887498949]], 
     StyleBox[
      LineBox[{{{0, 0}, {0, 21}}, {{1, 0}, {1, 21}}, {{2, 0}, {2, 21}}, {{3, 
       0}, {3, 21}}, {{4, 0}, {4, 21}}, {{5, 0}, {5, 21}}, {{6, 0}, {6, 
       21}}, {{7, 0}, {7, 21}}, {{8, 0}, {8, 21}}, {{9, 0}, {9, 21}}, {{10, 
       0}, {10, 21}}, {{11, 0}, {11, 21}}, {{12, 0}, {12, 21}}, {{13, 0}, {13,
        21}}, {{14, 0}, {14, 21}}, {{15, 0}, {15, 21}}, {{16, 0}, {16, 
       21}}, {{17, 0}, {17, 21}}, {{18, 0}, {18, 21}}, {{19, 0}, {19, 21}}, {{
       20, 0}, {20, 21}}, {{21, 0}, {21, 21}}, {{22, 0}, {22, 21}}, {{23, 
       0}, {23, 21}}, {{24, 0}, {24, 21}}, {{25, 0}, {25, 21}}, {{26, 0}, {26,
        21}}, {{27, 0}, {27, 21}}, {{28, 0}, {28, 21}}, {{29, 0}, {29, 
       21}}, {{30, 0}, {30, 21}}, {{31, 0}, {31, 21}}}],
      Antialiasing->False]}}},
  Epilog->{
    RGBColor[1, 0, 0], 
    Thickness[0.01], 
    ArrowBox[{{10, 21}, {0, 1}}]},
  Frame->False,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{{3.771811374371318*^9, 3.771811379766158*^9}, 
   3.771811563101922*^9, 3.771811602216404*^9, {3.7718116366445403`*^9, 
   3.7718116771079617`*^9}, {3.771811762836894*^9, 3.771811941419916*^9}},
 CellLabel->
  "Out[705]=",ExpressionUUID->"012c250f-ad0c-4710-9c13-666cf4b8a546"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["1. Initialize Cellular Automaton", "Section",
 CellChangeTimes->{{3.7717591637585506`*^9, 3.7717591690005236`*^9}, {
  3.7717592322823067`*^9, 
  3.771759235706395*^9}},ExpressionUUID->"ee7b8be8-ca0f-40a5-9563-\
45c8fab1cf55"],

Cell[TextData[{
 "The first step is to set up our cellular automaton. We can use the function \
",
 ButtonBox["CellularAutomaton",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/CellularAutomaton"],
 " to generate the rule 45 elementary cellular automaton. The function \
returns an array of 1s and 0s denoting black & white cells in the automaton. \
We will generate a large number of generations for our CA and initialize our \
search space. It is important to make these values large enough to detect \
longer patterns as the data tends to get more chaotic and expansive as you go \
further into the automaton."
}], "Text",
 CellChangeTimes->{{3.7717622722158976`*^9, 3.7717623278457456`*^9}, 
   3.7717623723190765`*^9, {3.7717624112744217`*^9, 3.771762415466135*^9}, {
   3.7717625000987825`*^9, 3.7717625089630003`*^9}, {3.77176254259087*^9, 
   3.771762699556662*^9}, {3.771762789042225*^9, 3.77176286017878*^9}, {
   3.771763498644381*^9, 3.7717635002761707`*^9}, {3.7717635969555793`*^9, 
   3.771763596966551*^9}, 
   3.771775102243782*^9},ExpressionUUID->"42f55d38-378b-4a03-87bd-\
b3b821d84e5b"],

Cell[CellGroupData[{

Cell["1.1 - Access Data From Automaton ", "Subsection",
 CellChangeTimes->{{3.771759265839641*^9, 
  3.7717593447878675`*^9}},ExpressionUUID->"6ebaf530-6612-41b6-be36-\
3d75ebf6908a"],

Cell["\<\
Below is an array representation of the automaton, which we can use to \
extract sequences of 1s and 0s to analyze patterns:\
\>", "CodeText",
 CellChangeTimes->{{3.7717583433660097`*^9, 3.7717583591115685`*^9}, {
  3.7717584461585293`*^9, 3.7717584863605704`*^9}, {3.771775147330838*^9, 
  3.7717751498354225`*^9}},ExpressionUUID->"7c4fa115-9afc-4e3a-a7a4-\
2ef94a62e5a9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Grid", "[", 
   RowBox[{"CellularAutomaton", "[", 
    RowBox[{"45", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", "0"}], "}"}], ",", "20"}], "]"}], "]"}], 
  " "}]], "Input",
 CellChangeTimes->{{3.771251428419516*^9, 3.7712514440726185`*^9}, {
   3.7712519314603553`*^9, 3.7712519380068903`*^9}, 3.7712528911557474`*^9, {
   3.7712530002959385`*^9, 3.7712530005353236`*^9}, 3.7712530368652515`*^9, {
   3.7712532702601914`*^9, 3.771253270376852*^9}, {3.7712545275685596`*^9, 
   3.7712545547215514`*^9}, {3.771255150078669*^9, 3.771255150228178*^9}, {
   3.7712552396669817`*^9, 3.7712552397738104`*^9}, {3.7712585907479897`*^9, 
   3.7712585931876345`*^9}, {3.7712716391740665`*^9, 3.771271639313878*^9}, 
   3.771417272826758*^9},
 CellLabel->"In[54]:=",ExpressionUUID->"77c4fb15-035a-4a68-b29a-93330cbca5c7"],

Cell[BoxData[
 TagBox[GridBox[{
    {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", 
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
     "0", "0", "0"},
    {"1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", 
     "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
     "1", "1", "1"},
    {"0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", 
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
     "0", "0", "0"},
    {"1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "0", "0", "0", 
     "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
     "1", "1", "1"},
    {"0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "1", "0", 
     "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
     "0", "0", "0"},
    {"1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "0", "1", 
     "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
     "1", "1", "1"},
    {"0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "1", "1", 
     "0", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
     "0", "0", "0"},
    {"1", "1", "1", "1", "1", "1", "0", "1", "0", "0", "0", "1", "1", "0", 
     "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
     "1", "1", "1"},
    {"0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "0", "1", "0", "1", 
     "1", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
     "0", "0", "0"},
    {"1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "1", 
     "0", "0", "1", "0", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", 
     "1", "1", "1"},
    {"0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", 
     "0", "0", "1", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", 
     "0", "0", "0"},
    {"1", "1", "1", "1", "0", "1", "0", "0", "0", "0", "1", "1", "1", "1", 
     "1", "0", "1", "0", "0", "0", "0", "0", "1", "1", "1", "1", "1", "1", 
     "1", "1", "1"},
    {"0", "0", "0", "0", "1", "1", "0", "1", "1", "0", "1", "0", "0", "0", 
     "0", "1", "1", "0", "1", "1", "1", "0", "1", "0", "0", "0", "0", "0", 
     "0", "0", "0"},
    {"1", "1", "1", "0", "1", "0", "1", "1", "0", "1", "1", "0", "1", "1", 
     "0", "1", "0", "1", "1", "0", "0", "1", "1", "0", "1", "1", "1", "1", 
     "1", "1", "1"},
    {"0", "0", "0", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "0", 
     "1", "1", "1", "1", "0", "0", "0", "1", "0", "1", "1", "0", "0", "0", 
     "0", "0", "0"},
    {"1", "1", "0", "1", "0", "0", "0", "1", "1", "0", "1", "1", "0", "1", 
     "1", "0", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1", "1", 
     "1", "1", "1"},
    {"0", "0", "1", "1", "0", "1", "0", "1", "0", "1", "1", "0", "1", "1", 
     "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "0", "0", "1", "0", 
     "0", "0", "0"},
    {"1", "0", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", 
     "0", "0", "1", "0", "1", "1", "0", "0", "0", "1", "1", "0", "1", "0", 
     "1", "1", "1"},
    {"0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "1", "1", "0", "0", 
     "1", "0", "1", "1", "1", "0", "0", "1", "0", "1", "0", "1", "1", "1", 
     "1", "0", "0"},
    {"0", "1", "0", "0", "0", "0", "1", "1", "1", "0", "1", "0", "0", "0", 
     "1", "1", "1", "0", "0", "0", "0", "1", "1", "1", "1", "1", "0", "0", 
     "0", "0", "1"},
    {"1", "1", "0", "1", "1", "0", "1", "0", "0", "1", "1", "0", "1", "0", 
     "1", "0", "0", "0", "1", "1", "0", "1", "0", "0", "0", "0", "0", "1", 
     "1", "0", "1"}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.77141727516251*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"ddcaff70-9683-4b1a-9376-eac2f5426b4f"]
}, Open  ]],

Cell[TextData[{
 "Using the function ",
 ButtonBox["CellularAutomaton",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/CellularAutomaton"],
 ", we can treat the automaton as an array of 1s and 0s (denoting black and \
white cells). This makes it easy to access rows and elements at any position \
in the automaton. The code below retrieves the third generation of our \
automaton."
}], "CodeText",
 CellChangeTimes->{{3.7717593555122504`*^9, 3.7717593809605885`*^9}, {
  3.771759442196253*^9, 3.771759535448555*^9}, {3.77175960906028*^9, 
  3.7717596157485456`*^9}, {3.7717596775089135`*^9, 3.771759689276037*^9}, {
  3.7717634663661985`*^9, 3.771763466539942*^9}, {3.7717636703010235`*^9, 
  3.771763670310785*^9}, {3.771775171589613*^9, 
  3.7717751852194195`*^9}},ExpressionUUID->"8b23958c-1e06-489f-86d9-\
07cccdd49021"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"CellularAutomaton", "[", 
   RowBox[{"45", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "1", "}"}], ",", "0"}], "}"}], ",", "20"}], "]"}], "[", 
  RowBox[{"[", "3", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.771759555419902*^9, 3.7717595575935583`*^9}, {
  3.7717595897595706`*^9, 3.7717595985035*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"6e8471fd-e2e0-4715-8bb2-ea47cfb57b2a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0"}], "}"}]], "Output",
 CellChangeTimes->{{3.771759593162429*^9, 3.7717595991767273`*^9}},
 CellLabel->"Out[44]=",ExpressionUUID->"63788646-feb3-4350-a8ab-235b80a1dd6b"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["1.2 - Cellular Automata Initialization", "Subsection",
 CellChangeTimes->{{3.7715220136591825`*^9, 3.771522021690708*^9}, {
  3.7717592407786407`*^9, 
  3.7717592593764544`*^9}},ExpressionUUID->"e1d05b93-fea1-46ab-8bb0-\
33434d7e194b"],

Cell[TextData[{
 StyleBox["numgen -",
  FontWeight->"Bold",
  FontColor->GrayLevel[0.5]],
 " the number of generations to produce in our automaton."
}], "CodeText",
 CellChangeTimes->{{3.771759937435178*^9, 3.771759954353015*^9}, 
   3.771760586956811*^9, {3.7717637830310717`*^9, 3.771763785212023*^9}, 
   3.7717646529406495`*^9, 
   3.771764882500145*^9},ExpressionUUID->"3abbe32d-50c1-473f-ae6c-\
fd719bf66bde"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"numgen", " ", "=", " ", "30000"}], ";"}], " "}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.771252905575344*^9, 3.771252995440121*^9}, {
   3.7712530532037487`*^9, 3.7712530651486135`*^9}, {3.771254461150963*^9, 
   3.7712544627953215`*^9}, 3.7712545026447673`*^9, {3.7712551573534355`*^9, 
   3.7712551575974417`*^9}, {3.7712552711348724`*^9, 3.77125531460279*^9}, {
   3.771255619994905*^9, 3.7712556201089725`*^9}, {3.771255651611729*^9, 
   3.7712556832099648`*^9}, {3.771255763417981*^9, 3.771255763647148*^9}, 
   3.7712559091331353`*^9, {3.771255979630612*^9, 3.771255979704455*^9}, 
   3.771270728514971*^9, 3.771270902944412*^9, {3.771272280751068*^9, 
   3.771272281241821*^9}, 3.771273037329586*^9, {3.7712907511945467`*^9, 
   3.77129076320014*^9}, {3.7712908225545535`*^9, 3.771290839308632*^9}, {
   3.7714153815001497`*^9, 3.77141538167568*^9}, 3.7714157020011425`*^9, 
   3.7714158431024156`*^9, {3.7714169863558264`*^9, 3.7714169874602327`*^9}, {
   3.771417242743243*^9, 3.7714172428250184`*^9}, {3.7714186354450016`*^9, 
   3.7714186363555694`*^9}, {3.77141885660283*^9, 3.7714188577297554`*^9}, {
   3.771426169705703*^9, 3.7714261699919252`*^9}, {3.77142624279525*^9, 
   3.771426242914367*^9}, {3.77142648822628*^9, 3.771426488277834*^9}, {
   3.771426751379349*^9, 3.7714267516515937`*^9}, 3.7714335097334585`*^9, 
   3.771494866678602*^9, {3.771494951005666*^9, 3.771494951520205*^9}, 
   3.7714993797002583`*^9, {3.771500406181242*^9, 3.7715004065572834`*^9}, 
   3.771503122516038*^9, 3.771521507210953*^9, 3.771581840262166*^9, {
   3.7716027911016474`*^9, 3.771602791529459*^9}, {3.771603012836536*^9, 
   3.771603013497529*^9}, {3.771684253166484*^9, 3.771684253855612*^9}, 
   3.7716941339763823`*^9, {3.7716951540577917`*^9, 3.7716951701013613`*^9}, {
   3.7717597598093414`*^9, 
   3.771759770750144*^9}},ExpressionUUID->"cad9bc65-eb2d-48a4-97a9-\
cea37b20d165"],

Cell[TextData[{
 StyleBox["ca",
  FontWeight->"Bold"],
 " - the cellular automaton array."
}], "CodeText",
 CellChangeTimes->{{3.7717637664173737`*^9, 3.771763793358801*^9}, 
   3.771764880828785*^9},ExpressionUUID->"956f9ef5-28af-4e75-a7c3-\
2b46a61e8d39"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ca", " ", "=", " ", 
   RowBox[{"CellularAutomaton", "[", 
    RowBox[{"45", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", "0"}], "}"}], ",", "numgen"}], "]"}]}], 
  ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.7712725762828336`*^9, 3.7712725828439107`*^9}, {
   3.7712729827373962`*^9, 3.7712730257793703`*^9}, 3.7712907632011757`*^9, 
   3.771521507210953*^9, 3.771522753889621*^9, 3.7715816694275026`*^9, 
   3.771694133977379*^9, {3.7716951756478615`*^9, 3.771695228916328*^9}, {
   3.771763705116315*^9, 
   3.7717637569971156`*^9}},ExpressionUUID->"3d5ebd2c-87a1-408d-b60b-\
3e68ad1a8702"],

Cell[TextData[{
 StyleBox["ndiagonal",
  FontWeight->"Bold"],
 " - number of cells to analyze per diagonal."
}], "CodeText",
 CellChangeTimes->{{3.771763807250552*^9, 3.771763815107184*^9}, 
   3.7717648764952555`*^9},ExpressionUUID->"96382a08-b100-4e2e-b7f9-\
eee4b404f532"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ndiagonal", " ", "=", " ", "24000"}], ";"}], " "}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.771272830264681*^9, 3.771272850570346*^9}, {
   3.771273001053266*^9, 3.771273010029018*^9}, {3.7712730557690315`*^9, 
   3.7712730558498044`*^9}, 3.7712731468202944`*^9, 3.7712896929337335`*^9, {
   3.7712902008836956`*^9, 3.7712902013634634`*^9}, {3.771290418205626*^9, 
   3.771290437293544*^9}, {3.771290841751461*^9, 3.7712908456796045`*^9}, 
   3.7714154015108423`*^9, {3.771415666504478*^9, 3.771415673072487*^9}, {
   3.771416037427905*^9, 3.7714160376064353`*^9}, {3.771416991637048*^9, 
   3.77141699296714*^9}, {3.7714172482976823`*^9, 3.7714172486314545`*^9}, {
   3.771418643870468*^9, 3.7714186450942335`*^9}, {3.771418864120812*^9, 
   3.771418864297059*^9}, 3.77142467783953*^9, {3.771424955436835*^9, 
   3.771424955575601*^9}, {3.7714261509697924`*^9, 3.771426176071869*^9}, {
   3.771426250782892*^9, 3.771426251821588*^9}, {3.7714265012585793`*^9, 
   3.771426501377805*^9}, 3.7714267605450387`*^9, {3.7714334895564137`*^9, 
   3.77143349471*^9}, 3.7714337024291987`*^9, {3.771433774290039*^9, 
   3.771433780453558*^9}, 3.7714950976505156`*^9, {3.771495616043991*^9, 
   3.77149561627733*^9}, {3.7714956803897676`*^9, 3.7714956866464195`*^9}, 
   3.7715000513249617`*^9, {3.771503414687888*^9, 3.7715034158866816`*^9}, {
   3.771521451414203*^9, 3.7715214520125537`*^9}, 3.771521507210953*^9, {
   3.7715237763471975`*^9, 3.7715237764888105`*^9}, {3.7715238143276567`*^9, 
   3.7715238362978916`*^9}, {3.7715238783923254`*^9, 
   3.7715238973568263`*^9}, {3.771546951421664*^9, 3.7715469517599063`*^9}, {
   3.771581834084444*^9, 3.7715818355270967`*^9}, 3.77158530453514*^9, {
   3.7715856195613284`*^9, 3.7715856207366*^9}, {3.771586717281608*^9, 
   3.7715867177645345`*^9}, {3.7716197135958796`*^9, 3.7716197158568325`*^9}, 
   3.7716199577669683`*^9, {3.7716915420895815`*^9, 3.7716915424348083`*^9}, {
   3.771691807471028*^9, 3.771691807576033*^9}, {3.771692038136386*^9, 
   3.7716920384210567`*^9}, {3.771693945281857*^9, 3.7716939453997407`*^9}, {
   3.7716940525782275`*^9, 3.771694052949736*^9}, 3.7716941039292994`*^9, 
   3.771694133977379*^9, {3.771694578578437*^9, 3.771694605609338*^9}, {
   3.77169523346599*^9, 3.771695249450727*^9}, {3.771696802918164*^9, 
   3.7716968175289326`*^9}, {3.771763823591178*^9, 
   3.771763824716967*^9}},ExpressionUUID->"5e01c1c4-412c-42b8-8e59-\
c33fea4e9893"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["2. Generating Pattern Data for a Diagonal", "Section",
 CellChangeTimes->{{3.771759996995117*^9, 3.7717600079662266`*^9}, {
  3.771760075227207*^9, 
  3.771760092787793*^9}},ExpressionUUID->"eabf648e-db2b-4515-bdef-\
9163899c947f"],

Cell["\<\
After initializing our cellular automaton, we need to extract data from it to \
conduct our analysis. Here, diagonals of slope 2 are retrieved from the \
left-hand edge of the automaton. From the left edge, we must move deeper into \
the automaton and retrieve the periodicity of the patterns generated at each \
depth. Here, we will first examine the process of extracting a diagonal, \
detecting repeating patterns using FindTransientRepeat, and finally define a \
useful function which can give us the pattern period of a diagonal at any \
given depth.\
\>", "Text",
 CellChangeTimes->{{3.771761259985511*^9, 3.7717613371834335`*^9}, {
  3.7717613839188385`*^9, 3.771761501658247*^9}, {3.7717615661677666`*^9, 
  3.7717616348968134`*^9}},ExpressionUUID->"e78dc475-8219-49f0-bc5d-\
067dc60251e7"],

Cell[CellGroupData[{

Cell["2.1 - Extracting Diagonals", "Subsection",
 CellChangeTimes->{{3.7715220335071115`*^9, 3.771522077273878*^9}, {
  3.7717592446312857`*^9, 3.7717592489859056`*^9}, {3.7717602785476217`*^9, 
  3.771760281378572*^9}, {3.7717604770645175`*^9, 
  3.7717604998399973`*^9}},ExpressionUUID->"0e3ff1c1-a0a6-48eb-abee-\
2d4339869aae"],

Cell[TextData[{
 StyleBox["diagnumber",
  FontWeight->"Bold"],
 " - the nth diagonal or number of diagonal."
}], "CodeText",
 CellChangeTimes->{{3.771763867134035*^9, 3.771763900365354*^9}, 
   3.771763957473524*^9, 
   3.771764872637475*^9},ExpressionUUID->"1702e449-d82d-417c-96fd-\
c236ab64942a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"diagnumber", " ", "=", " ", "3"}], ";"}], " "}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.77125537143287*^9, 3.771255378592731*^9}, {
   3.7712554403276033`*^9, 3.7712554493175735`*^9}, {3.7712554840407577`*^9, 
   3.771255540011052*^9}, 3.7712559091351604`*^9, {3.7712559399217973`*^9, 
   3.771255967403307*^9}, {3.771256055665377*^9, 3.771256055723215*^9}, {
   3.7712568792194085`*^9, 3.771256949888436*^9}, {3.771257078658127*^9, 
   3.7712570791208997`*^9}, {3.7712571263756866`*^9, 3.7712571567177343`*^9}, 
   3.771257217533781*^9, 3.7712578252609515`*^9, {3.7712579307448936`*^9, 
   3.771257930797031*^9}, {3.771257986056984*^9, 3.771257986170682*^9}, {
   3.771258058121292*^9, 3.771258058221018*^9}, {3.7712581156326113`*^9, 
   3.7712581156863565`*^9}, 3.771258156130258*^9, {3.7712581929338074`*^9, 
   3.7712582092053003`*^9}, {3.7712582427945185`*^9, 3.771258255510476*^9}, 
   3.7712583466657734`*^9, 3.7712584220380554`*^9, {3.7712584841052384`*^9, 
   3.77125848465665*^9}, {3.7712590552195635`*^9, 3.771259055452976*^9}, {
   3.7712591371664495`*^9, 3.7712591377568192`*^9}, {3.771270518976099*^9, 
   3.7712705215333014`*^9}, {3.7712706643574934`*^9, 
   3.7712706644201984`*^9}, {3.771270728515849*^9, 3.7712707511652503`*^9}, {
   3.771270783692317*^9, 3.7712708437587075`*^9}, {3.7712709029465847`*^9, 
   3.7712709127133317`*^9}, 3.7712724004563956`*^9, 3.7712726259876175`*^9, {
   3.771273098685325*^9, 3.7712730988967333`*^9}, {3.771289797207905*^9, 
   3.7712898214301434`*^9}, {3.771289860926524*^9, 3.7712898860534153`*^9}, 
   3.7712899966336465`*^9, {3.7712900940604267`*^9, 3.771290094676481*^9}, 
   3.7712902863033247`*^9, {3.7712904392183933`*^9, 3.771290463296009*^9}, {
   3.771290847812889*^9, 3.771290851445216*^9}, {3.7714154112456226`*^9, 
   3.771415412799455*^9}, 3.771415681079081*^9, {3.7714160444870663`*^9, 
   3.771416044570023*^9}, 3.771416976935974*^9, 3.771417011049752*^9, 
   3.7714171050923185`*^9, 3.7714171655974965`*^9, 3.7714178281614914`*^9, {
   3.771418649266057*^9, 3.7714186495742245`*^9}, 3.7716937796848335`*^9, {
   3.7716938128463125`*^9, 3.7716938319912543`*^9}, 3.7716948472249594`*^9, {
   3.7716949040591574`*^9, 3.771694909161623*^9}, {3.7716949668735533`*^9, 
   3.771694980573951*^9}, {3.7717639096496296`*^9, 
   3.7717639101485424`*^9}},ExpressionUUID->"332b4660-0d72-4a4c-8e13-\
b2e280316254"],

Cell[TextData[{
 StyleBox["initpos",
  FontWeight->"Bold"],
 " - position of initial/starting cell of diagonal."
}], "CodeText",
 CellChangeTimes->{{3.771763971088293*^9, 3.7717640025059285`*^9}, 
   3.7717648712999024`*^9},ExpressionUUID->"7a82b5cb-6e23-4aa0-8fcc-\
b09fac1ef9e9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"initpos", " ", "=", " ", 
   RowBox[{
    RowBox[{"Round", "[", 
     RowBox[{"numgen", "/", "2"}], "]"}], "+", "1"}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.771253138954173*^9, 3.7712531447028112`*^9}, {
   3.771253256944711*^9, 3.771253261888502*^9}, {3.771253296893881*^9, 
   3.771253315585046*^9}, {3.77125446667695*^9, 3.7712544722124968`*^9}, {
   3.771254567584317*^9, 3.7712545744870863`*^9}, 3.771254906473411*^9, {
   3.771255229088358*^9, 3.771255266525159*^9}, 3.771255299204816*^9, 
   3.7712559091351604`*^9, 3.77127072851781*^9, 3.771270902947404*^9, 
   3.771417266746025*^9, 3.771418611975027*^9, {3.7716949859503307`*^9, 
   3.7716950009385705`*^9}, {3.771764022461479*^9, 
   3.7717640230850477`*^9}},ExpressionUUID->"92311867-afc0-40a1-b5c3-\
aafc8d6181d2"],

Cell[TextData[{
 StyleBox["tbl",
  FontWeight->"Bold"],
 " - a 1 dimensional list of cells extracted from the nth diagonal. This is \
formed by traversing through the automaton in a diagonal fashion (shifting \
one step down and one step diagonally to the left, effectively traversing a \
diagonal of \[OpenCurlyDoubleQuote]slope\[CloseCurlyDoubleQuote] 2)."
}], "CodeText",
 CellChangeTimes->{{3.7717642931431017`*^9, 3.771764371521083*^9}, {
   3.771764489779711*^9, 3.7717645950315933`*^9}, 3.771764647200425*^9, 
   3.77176486934447*^9},ExpressionUUID->"ea5f2314-5607-4746-81eb-\
b55419b2e977"],

Cell[BoxData[
 RowBox[{"tbl", " ", "=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"ca", "[", 
      RowBox[{"[", 
       RowBox[{"x", "+", "diagnumber", "-", "1"}], "]"}], "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"initpos", "+", "diagnumber", "-", "1", "-", 
       RowBox[{"Ceiling", "[", 
        RowBox[{"x", "/", "2"}], "]"}], "+", "1"}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "1", ",", "ndiagonal"}], "}"}]}], "]"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{
  3.771257874676819*^9, {3.7712590944765882`*^9, 3.7712590950760746`*^9}, 
   3.7712707285188937`*^9, 3.7712709029484024`*^9, 3.771272287405158*^9, {
   3.7712725945568867`*^9, 3.7712726049289384`*^9}, {3.771272837922932*^9, 
   3.7712728386829624`*^9}, 3.7712730615436306`*^9, 3.7714169576355867`*^9, 
   3.7714170484870763`*^9, {3.771417596393553*^9, 3.7714176607911425`*^9}, {
   3.7714177525231705`*^9, 3.7714177616283903`*^9}, {3.7714177989825573`*^9, 
   3.77141782589056*^9}, {3.771417881539755*^9, 3.771417885430359*^9}, {
   3.7714179449744425`*^9, 3.7714179451080093`*^9}, {3.7714182722260656`*^9, 
   3.771418317757315*^9}, {3.7714185295875597`*^9, 3.7714185597618837`*^9}, 
   3.771418658326812*^9, {3.771693816398972*^9, 3.771693837095521*^9}, {
   3.7716939115930243`*^9, 3.771693915855174*^9}, {3.771694922069663*^9, 
   3.771694923177515*^9}, {3.7717646710023203`*^9, 
   3.771764671667897*^9}},ExpressionUUID->"0ec6ae16-9781-4fdd-846e-\
962ea7845791"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
          "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", 
           ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
           "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", 
           ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", 
           "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", 
           ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", 
           ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
           "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", 
           ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
           "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", 
           ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", 
           "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", 
           ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", 
           ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
           "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", 
           ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
           "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", 
           ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", 
           "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", 
           ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", "0", ",", 
           TemplateBox[{"14708"},
            "OutputSizeLimit`Skeleton"], ",", "1", ",", "1", ",", "1", ",", 
           "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", 
           ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", 
           "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", 
           ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", 
           ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
           "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", 
           ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
           "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", 
           ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", 
           "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", 
           ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", 
           ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
           "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", 
           ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
           "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", 
           ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", 
           "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", 
           ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", 
           "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", 
           ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          PaneBox[
           TagBox[
            TooltipBox[
             StyleBox[
              StyleBox[
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "FEStrings", "sizeBriefExplanation"], StandardForm],
                ImageSizeCache->{65., {3., 9.}}],
               StripOnInput->False,
               DynamicUpdating->True,
               LineSpacing->{1, 2},
               LineIndent->0,
               LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLText",
              StripOnInput->False],
             StyleBox[
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
                StandardForm]], DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}, StripOnInput -> False]],
            Annotation[#, 
             Style[
              Dynamic[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
              DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}], "Tooltip"]& ],
           Alignment->Center,
           BaselinePosition->Baseline,
           ImageSize->{Automatic, {25, Full}}], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{52., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {1., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 23, 15931054765113746209, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{62., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{62., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 23, 15931054765113746209, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{44., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{43., {1., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 23, 15931054765113746209, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{78., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{78., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[15931054765113746209 === $SessionID, 
   Out[23], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.771693837553551*^9, 3.7716939176913013`*^9, 
  3.7716948553808737`*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"262ec183-bee8-4c93-a7fd-0a9ae4113e2b"],

Cell[TextData[{
 "In the automaton diagram below, the red X\[CloseCurlyQuote]s denote the \
cells which will be included as part of a diagonal (in the below image, the \
first diagonal). Each diagonal is comprised by moving two cells down, and one \
cell diagonally to the left. ",
 StyleBox["This is important because the way we process our diagonals can \
change the values of our periodicities. ",
  FontSlant->"Italic"]
}], "CodeText",
 CellChangeTimes->{{3.7718128888370914`*^9, 
  3.7718130439627576`*^9}},ExpressionUUID->"88c37970-592e-4bdb-9cf0-\
54a9d2662e52"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{Typeset`open = False}, 
   TemplateBox[{"Expression",RowBox[{"ArrayPlot", "[", 
       DynamicBox[
        FEPrivate`FrontEndResource["FEBitmaps", "IconizeEllipsis"]], "]"}],
     GridBox[{{
        RowBox[{
          TagBox["\"Byte count: \"", "IconizedLabel"], "\[InvisibleSpace]", 
          TagBox["3352", "IconizedItem"]}]}}, 
      GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
      "Column", 
      GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],Dynamic[
     Typeset`open]},
    "IconizedObject"]],
  ArrayPlot[
   CellularAutomaton[45, {{1}, 0}, 10], Mesh -> All, Epilog -> {
     Inset[
      Style["X", Red, 20], {5.5, 10.5}], 
     Inset[
      Style["X", Red, 20], {5.5, 9.5}], 
     Inset[
      Style["X", Red, 20], {4.5, 8.5}], 
     Inset[
      Style["X", Red, 20], {4.5, 7.5}], 
     Inset[
      Style["X", Red, 20], {3.5, 6.5}], 
     Inset[
      Style["X", Red, 20], {3.5, 5.5}], 
     Inset[
      Style["X", Red, 20], {2.5, 4.5}], 
     Inset[
      Style["X", Red, 20], {2.5, 3.5}], 
     Inset[
      Style["X", Red, 20], {1.5, 2.5}], 
     Inset[
      Style["X", Red, 20], {1.5, 1.5}], 
     Inset[
      Style["...", Red, 20], {0.5, 0.5}]}],
  SelectWithContents->True,
  Selectable->False]], "Input",
 CellChangeTimes->{{3.7718120821349*^9, 3.7718121366596036`*^9}, {
   3.771812187133475*^9, 3.771812388056082*^9}, {3.771812432475647*^9, 
   3.771812629179985*^9}, {3.7718126657738223`*^9, 3.77181267383727*^9}, {
   3.771812732306196*^9, 3.77181280726048*^9}, 3.7718128621656246`*^9},
 CellLabel->
  "In[754]:=",ExpressionUUID->"d0d7c20b-d702-472d-8db8-4a95bfbee563"],

Cell[BoxData[
 GraphicsBox[{
   RasterBox[{{0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0}, {1, 0, 1, 0, 
    0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0}, {1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 
    1, 0, 1, 1}, {0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0}, {1, 1, 0, 
    0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1}, {0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 
    0, 0, 0, 0, 0}, {1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1}, {0, 0, 
    0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0}, {1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 
    1, 1, 1, 1, 1, 1}, {0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 
    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}, {{0, 0}, {16, 11}}, {0, 
    1}], {
    {GrayLevel[
      NCache[-1 + GoldenRatio, 0.6180339887498949]], 
     StyleBox[
      LineBox[{{{0, 11}, {16, 11}}, {{0, 10}, {16, 10}}, {{0, 9}, {16, 9}}, {{
       0, 8}, {16, 8}}, {{0, 7}, {16, 7}}, {{0, 6}, {16, 6}}, {{0, 5}, {16, 
       5}}, {{0, 4}, {16, 4}}, {{0, 3}, {16, 3}}, {{0, 2}, {16, 2}}, {{0, 
       1}, {16, 1}}, {{0, 0}, {16, 0}}}],
      Antialiasing->False]}, 
    {GrayLevel[
      NCache[-1 + GoldenRatio, 0.6180339887498949]], 
     StyleBox[
      LineBox[{{{0, 0}, {0, 11}}, {{1, 0}, {1, 11}}, {{2, 0}, {2, 11}}, {{3, 
       0}, {3, 11}}, {{4, 0}, {4, 11}}, {{5, 0}, {5, 11}}, {{6, 0}, {6, 
       11}}, {{7, 0}, {7, 11}}, {{8, 0}, {8, 11}}, {{9, 0}, {9, 11}}, {{10, 
       0}, {10, 11}}, {{11, 0}, {11, 11}}, {{12, 0}, {12, 11}}, {{13, 0}, {13,
        11}}, {{14, 0}, {14, 11}}, {{15, 0}, {15, 11}}, {{16, 0}, {16, 11}}}],
      Antialiasing->False]}}},
  Epilog->{
    InsetBox[
     BoxData[
      FormBox[
       StyleBox["\"X\"", 
        RGBColor[1, 0, 0], 20, StripOnInput -> False], TraditionalForm]], {
     5.5, 10.5}], 
    InsetBox[
     BoxData[
      FormBox[
       StyleBox["\"X\"", 
        RGBColor[1, 0, 0], 20, StripOnInput -> False], TraditionalForm]], {
     5.5, 9.5}], 
    InsetBox[
     BoxData[
      FormBox[
       StyleBox["\"X\"", 
        RGBColor[1, 0, 0], 20, StripOnInput -> False], TraditionalForm]], {
     4.5, 8.5}], 
    InsetBox[
     BoxData[
      FormBox[
       StyleBox["\"X\"", 
        RGBColor[1, 0, 0], 20, StripOnInput -> False], TraditionalForm]], {
     4.5, 7.5}], 
    InsetBox[
     BoxData[
      FormBox[
       StyleBox["\"X\"", 
        RGBColor[1, 0, 0], 20, StripOnInput -> False], TraditionalForm]], {
     3.5, 6.5}], 
    InsetBox[
     BoxData[
      FormBox[
       StyleBox["\"X\"", 
        RGBColor[1, 0, 0], 20, StripOnInput -> False], TraditionalForm]], {
     3.5, 5.5}], 
    InsetBox[
     BoxData[
      FormBox[
       StyleBox["\"X\"", 
        RGBColor[1, 0, 0], 20, StripOnInput -> False], TraditionalForm]], {
     2.5, 4.5}], 
    InsetBox[
     BoxData[
      FormBox[
       StyleBox["\"X\"", 
        RGBColor[1, 0, 0], 20, StripOnInput -> False], TraditionalForm]], {
     2.5, 3.5}], 
    InsetBox[
     BoxData[
      FormBox[
       StyleBox["\"X\"", 
        RGBColor[1, 0, 0], 20, StripOnInput -> False], TraditionalForm]], {
     1.5, 2.5}], 
    InsetBox[
     BoxData[
      FormBox[
       StyleBox["\"X\"", 
        RGBColor[1, 0, 0], 20, StripOnInput -> False], TraditionalForm]], {
     1.5, 1.5}], 
    InsetBox[
     BoxData[
      FormBox[
       StyleBox["\"...\"", 
        RGBColor[1, 0, 0], 20, StripOnInput -> False], TraditionalForm]], {
     0.5, 0.5}]},
  Frame->False,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{
  3.7718120718224688`*^9, {3.7718121149163837`*^9, 3.771812137197025*^9}, {
   3.771812197312216*^9, 3.7718123909463243`*^9}, {3.7718124571129065`*^9, 
   3.7718124642897406`*^9}, {3.771812524070783*^9, 3.7718126296650395`*^9}, {
   3.7718126708521566`*^9, 3.771812674290306*^9}, {3.7718127385878615`*^9, 
   3.7718128078994675`*^9}, {3.7718128671501584`*^9, 3.7718128697168427`*^9}},
 CellLabel->
  "Out[754]=",ExpressionUUID->"5a3d21b7-8685-4add-9040-23e547e87410"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["2.2 - Detect Repeating Patterns within Diagonal ", "Subsection",
 CellChangeTimes->{{3.771760318566559*^9, 3.7717603509616547`*^9}, {
  3.771760508541008*^9, 
  3.771760521091657*^9}},ExpressionUUID->"56807553-e44c-4113-9a3b-\
bff8d0e5bd0f"],

Cell[TextData[{
 StyleBox["repseq",
  FontWeight->"Bold"],
 " - The function ",
 ButtonBox["FindTransientRepeat",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FindTransientRepeat"],
 " identifies a repeating sequence in tbl that occurs at least 2 times after \
the transient set of list elements. The repeating sequence is stored in \
repseq. Some diagonals had some disorder at the beginning, and a repetitive \
structure (the pattern) only developed later on, so FindTransientRepeat was \
necessary to eliminate data that obstructed our pattern."
}], "CodeText",
 CellChangeTimes->{{3.7717646820172777`*^9, 3.7717646911942186`*^9}, {
  3.771764747317093*^9, 3.7717648291176624`*^9}, {3.77187819978592*^9, 
  3.7718782417805495`*^9}},ExpressionUUID->"136ad488-00de-4806-82c3-\
1e971b630764"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"repseq", " ", "=", 
  RowBox[{
   RowBox[{"FindTransientRepeat", "[", 
    RowBox[{"tbl", ",", "2"}], "]"}], "[", 
   RowBox[{"[", "2", "]"}], "]"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.77127059668846*^9, 3.7712706894343176`*^9}, 
   3.771270728520802*^9, 3.77127076505212*^9, 3.771270902951517*^9, {
   3.7714156317440476`*^9, 3.771415639464368*^9}, {3.7714170719869347`*^9, 
   3.7714170773813763`*^9}, {3.7716949365473747`*^9, 3.771694937486098*^9}, {
   3.7717646959559*^9, 
   3.7717646963903537`*^9}},ExpressionUUID->"d66697fa-0c93-49f3-905a-\
fa715a6f244b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.771270646184039*^9, 3.771270676676423*^9}, {
   3.771270728521798*^9, 3.771270850729149*^9}, {3.7712709029525013`*^9, 
   3.771270920871564*^9}, 3.7712723258594007`*^9, 3.7712724389183025`*^9, 
   3.7712726296772757`*^9, 3.7712730695324793`*^9, 3.771289710383107*^9, {
   3.771289804159402*^9, 3.77128983088089*^9}, 3.771289896552288*^9, 
   3.77128997007865*^9, 3.771290007992301*^9, 3.771290216996605*^9, 
   3.7714153654231367`*^9, 3.77141542085395*^9, 3.771415652412768*^9, 
   3.7714156903452997`*^9, {3.7714160300050516`*^9, 3.7714160490518184`*^9}, {
   3.771417001596023*^9, 3.77141701402479*^9}, {3.7714170737401123`*^9, 
   3.7714170794079547`*^9}, 3.771418620571767*^9, 3.7714186724620132`*^9, {
   3.771693786741374*^9, 3.7716938195461397`*^9}, 3.7716948658449793`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"ffe5be4c-ba9b-4c16-b16c-b7f25765055a"]
}, Open  ]],

Cell[TextData[{
 StyleBox["period",
  FontWeight->"Bold"],
 " - length of the repeating sequence as identified by ",
 ButtonBox["FindTransientRepeat. ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FindTransientRepeat"]
}], "CodeText",
 CellChangeTimes->{{3.7717647244652357`*^9, 3.7717647447392073`*^9}, {
  3.7717648608632174`*^9, 3.771764866255364*^9}, {3.771878165703091*^9, 
  3.7718781966502795`*^9}},ExpressionUUID->"7562e0d8-5f23-4bfb-841c-\
fcc7bb48092c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"period", " ", "=", " ", 
  RowBox[{"Length", "[", "repseq", "]"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.77127070547941*^9, 3.7712707285237923`*^9}, 
   3.771270902953391*^9, {3.7716949452111206`*^9, 3.771694948405802*^9}, {
   3.7717648380332937`*^9, 
   3.7717648383273892`*^9}},ExpressionUUID->"afeab1dd-bc01-49db-9104-\
ba9326e7b0b0"],

Cell[BoxData["4"], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.771270734226672*^9, 3.771270850804864*^9}, {
   3.771270902954385*^9, 3.771270920944311*^9}, 3.771272325938386*^9, 
   3.7712724389989977`*^9, 3.771272629779868*^9, 3.771273069612305*^9, 
   3.771289713988432*^9, {3.7712898100826197`*^9, 3.771289830960681*^9}, 
   3.7712899032764535`*^9, 3.7712899807301702`*^9, 3.7712900167338963`*^9, 
   3.7712902192555647`*^9, 3.7714153655268865`*^9, 3.7714154209466686`*^9, 
   3.771415690423092*^9, 3.7714160491375895`*^9, {3.771417001659851*^9, 
   3.771417014093723*^9}, 3.7714186725318284`*^9, 3.7716948678584733`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"9a567e5d-3817-42cc-87f0-b50e104c3d1b"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
2.3 - Wrapping The Process in a Function (DiagonalPatternPeriod)\
\>", "Subsection",
 CellChangeTimes->{{3.7715220924034204`*^9, 3.771522125819072*^9}, {
  3.771582263792886*^9, 3.7715822967061515`*^9}, {3.7717608676376753`*^9, 
  3.7717608698290033`*^9}, {3.7717725364431305`*^9, 
  3.771772544272707*^9}},ExpressionUUID->"641fa0e7-9f9e-42a7-8ab4-\
8cb87d0325bd"],

Cell[TextData[{
 StyleBox["DiagonalPatternPeriod",
  FontWeight->"Bold"],
 " is a function that takes the parameter diagnumber (number/depth of \
diagonal)\nand returns an integer value representing the period of the \
pattern present in the diagonal."
}], "CodeText",
 CellChangeTimes->{{3.7717609870668087`*^9, 3.7717609930000086`*^9}, {
  3.771764953993005*^9, 
  3.771764976855387*^9}},ExpressionUUID->"50cad2f2-6b80-4eb3-82c3-\
74e10d209c54"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DiagonalPatternPeriod", "[", "diagnumber_", "]"}], ":=", 
  RowBox[{"Length", "[", 
   RowBox[{
    RowBox[{"FindTransientRepeat", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ca", "[", 
          RowBox[{"[", 
           RowBox[{"x", "+", "diagnumber", "-", "1"}], "]"}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"initpos", "+", "diagnumber", "-", "1", "-", 
           RowBox[{"Ceiling", "[", 
            RowBox[{"x", "/", "2"}], "]"}], "+", "1"}], "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "1", ",", "ndiagonal"}], "}"}]}], "]"}], ",", 
      "2"}], "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771522277811642*^9, 3.7715222949567966`*^9}, {
   3.7715471841551533`*^9, 3.771547200025488*^9}, {3.771547350990754*^9, 
   3.7715473990801196`*^9}, {3.7715823762622395`*^9, 3.771582526866946*^9}, {
   3.7716027811923103`*^9, 3.771602787598976*^9}, {3.7716030215280557`*^9, 
   3.771603023553777*^9}, {3.771606191784465*^9, 3.7716062056613617`*^9}, {
   3.77161951461199*^9, 3.7716195171412334`*^9}, {3.7716844160158606`*^9, 
   3.7716844429690332`*^9}, {3.771687326741164*^9, 3.771687329318636*^9}, {
   3.771688883075987*^9, 3.7716888956736174`*^9}, 3.7716940209980764`*^9, 
   3.771761010902958*^9, 3.771761101237108*^9},
 CellLabel->"In[42]:=",ExpressionUUID->"a9f50038-f2f2-4db7-96c5-04177c8b28b5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DiagonalPatternPeriod", "[", "34", "]"}]], "Input",
 CellChangeTimes->{{3.771547290926363*^9, 3.7715472944150176`*^9}, {
  3.7715473564412746`*^9, 3.7715473705245233`*^9}, {3.7715474021349945`*^9, 
  3.771547451427155*^9}, {3.771619883280151*^9, 3.7716198943585253`*^9}, {
  3.7716862712805967`*^9, 3.771686273217372*^9}, {3.771694038770694*^9, 
  3.771694063518654*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"28ec88df-5df4-499a-9a46-be13e73674ec"],

Cell[BoxData["16"], "Output",
 CellChangeTimes->{3.771694450908457*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"108c7501-3e6e-4b8f-8dfa-629ae6518610"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["3. Generating Pattern Data for a Range of Diagonals", "Section",
 CellChangeTimes->{{3.771760029355361*^9, 
  3.7717600598686104`*^9}},ExpressionUUID->"327433db-5723-42a8-810e-\
fdf74b015c19"],

Cell[TextData[{
 "Next, we attempt to generate pattern period data for diagonals of \
number/depth 1...n. This way, we can examine how the periods of patterns \
change through each step deeper into the automaton. We explore two approaches \
for generating this table of period values of diagonals from 1...n. The first \
approach is quite naive and ends up becoming very slow for larger values of \
n. The second approach, however, uses a search algorithm to identify \
breakpoints in the data without actually generating the whole list. Based on \
a modified binary search,  the second approach is far more efficient for \
larger values of n; therefore, we can delve deeper into the automaton and \
compute pattern periods more efficiently. ",
 StyleBox["However, while this algorithm is faster, it does not affect space \
complexity.",
  FontVariations->{"Underline"->True}]
}], "Text",
 CellChangeTimes->{{3.771762928343912*^9, 3.771763073423919*^9}, {
  3.771770656315519*^9, 3.7717707529891496`*^9}, {3.7717709279975524`*^9, 
  3.7717709312911572`*^9}, {3.771771007243606*^9, 3.7717712562302*^9}, {
  3.7717713221279964`*^9, 3.7717713256945324`*^9}, {3.7717726549883003`*^9, 
  3.771772730794511*^9}, {3.7717753818195972`*^9, 
  3.7717754406244936`*^9}},ExpressionUUID->"b6b1072f-f588-4bf0-8f6e-\
e6c83ed2a057"],

Cell[CellGroupData[{

Cell["\<\
3.1 - Generate Table of Pattern Periods in Diagonals | O(m*n) Naive Approach\
\>", "Subsection",
 CellChangeTimes->{{3.7715221917158613`*^9, 3.7715222057293906`*^9}, {
   3.7715231579960456`*^9, 3.7715231602809343`*^9}, {3.771585850763338*^9, 
   3.7715858520024276`*^9}, {3.771585959124041*^9, 3.771585996530682*^9}, {
   3.77158617695678*^9, 3.7715862252426767`*^9}, 3.7715862814874363`*^9, {
   3.7717622146178627`*^9, 3.7717622166296816`*^9}, {3.7717709602827616`*^9, 
   3.7717709609332576`*^9}, {3.7717709932673893`*^9, 3.771770998109044*^9}, {
   3.7717724076660404`*^9, 3.7717724138668466`*^9}, {3.7717724862746925`*^9, 
   3.7717725067692385`*^9}, {3.771772573134837*^9, 
   3.771772573355877*^9}},ExpressionUUID->"1db36d7b-8b16-4533-aaaf-\
7a4699834ae4"],

Cell[TextData[{
 StyleBox["prdlist",
  FontWeight->"Bold"],
 " is a function that takes an argument n, and it returns a table of periods \
in diagonals 1...n. This function calls DiagonalPatternPeriod for every \
diagnumber (diagonal depth) value from 1...n. The time complexity of this \
algorithm is O(m*n), as DiagonalPatternPeriod (which is about O(m) for a \
diagonal of length m) is called n times."
}], "CodeText",
 CellChangeTimes->{{3.771765154210894*^9, 3.771765161984789*^9}, {
  3.7717700737314386`*^9, 3.771770118149561*^9}, {3.7717702767428136`*^9, 
  3.7717703987761784`*^9}, {3.7717709397845106`*^9, 3.7717709837939577`*^9}, {
  3.771773964515731*^9, 
  3.771773973432165*^9}},ExpressionUUID->"ec1663f4-53ba-41f0-b33f-\
9fdcd1f81b68"],

Cell[BoxData[
 RowBox[{
  RowBox[{"prdlist", "[", "n_", "]"}], " ", ":=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"DiagonalPatternPeriod", "[", "d", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"d", ",", "1", ",", "n", ",", "1"}], "}"}]}], "]"}], 
  " "}]], "Input",
 CellChangeTimes->{{3.7712709889853864`*^9, 3.771271100604924*^9}, {
   3.771271170768334*^9, 3.7712711717047815`*^9}, {3.7712726492296667`*^9, 
   3.7712726517911005`*^9}, {3.771272694857012*^9, 3.77127274399441*^9}, {
   3.7712728694559994`*^9, 3.7712728759059453`*^9}, {3.771272907876478*^9, 
   3.771272934985548*^9}, {3.7712900807188025`*^9, 3.7712900809322677`*^9}, {
   3.7714263334408655`*^9, 3.771426352190135*^9}, {3.7714345014047866`*^9, 
   3.771434502672389*^9}, {3.7715190361511126`*^9, 3.771519040814642*^9}, {
   3.771523002299374*^9, 3.7715230596081333`*^9}, {3.771523123733663*^9, 
   3.7715231302282953`*^9}, 3.771547464342605*^9, {3.7715810229541855`*^9, 
   3.7715810269876842`*^9}, {3.771582656230706*^9, 3.7715826967827806`*^9}, {
   3.771582747570762*^9, 3.771582751660369*^9}, {3.771582894990094*^9, 
   3.7715828978129215`*^9}, {3.771586013049634*^9, 3.7715860960198607`*^9}, 
   3.771586168048229*^9, {3.771606715573776*^9, 3.771606719992607*^9}, {
   3.771695099704876*^9, 3.771695101702665*^9}, {3.7717651664471054`*^9, 
   3.7717651667282534`*^9}, {3.7717707923768425`*^9, 
   3.7717707955862875`*^9}, {3.771770852325297*^9, 3.7717708587469015`*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"4272457a-0f11-4c85-9b60-c3f9d80ac91e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"prdlist", "[", "100", "]"}]], "Input",
 CellChangeTimes->{{3.771523111600148*^9, 3.771523138023451*^9}, {
  3.771523803330036*^9, 3.7715238036890783`*^9}, {3.771586361844985*^9, 
  3.7715863663141155`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"15df06a4-8614-4c06-8ab1-0e9825c62762"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "4", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", 
   ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", 
   "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", 
   ",", "8", ",", "8", ",", "8", ",", "16", ",", "16", ",", "16", ",", "16", 
   ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", 
   "16", ",", "16", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", 
   ",", "32", ",", "32", ",", "96", ",", "96", ",", "96", ",", "96", ",", 
   "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", 
   ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", 
   "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", 
   ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", 
   "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", 
   ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", 
   "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", 
   ",", "96", ",", "96", ",", "96", ",", "96", ",", "96"}], "}"}]], "Output",
 CellChangeTimes->{3.771694504189103*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"484b7c3a-48cb-4d6e-8ff0-116a69ae6bc7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"{", 
   RowBox[{
   "1", ",", "4", ",", "4", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", 
    ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",",
     "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", 
    "8", ",", "8", ",", "8", ",", "8", ",", "16", ",", "16", ",", "16", ",", 
    "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", 
    ",", "16", ",", "16", ",", "32", ",", "32", ",", "32", ",", "32", ",", 
    "32", ",", "32", ",", "32", ",", "96", ",", "96", ",", "96", ",", "96", 
    ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", 
    "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", 
    ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", 
    "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", 
    ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", 
    "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", 
    ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", 
    "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96"}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7715865191431413`*^9, 3.771586534911664*^9}, {
   3.7716026157457542`*^9, 3.7716026448379197`*^9}, 3.7716945474773254`*^9, 
   3.771754332399488*^9, {3.7717544838679137`*^9, 3.7717544849772873`*^9}, {
   3.771754611134509*^9, 3.771754618326977*^9}, {3.771896722719926*^9, 
   3.7718967371614475`*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"7e3a7b77-ef58-44e8-9814-efeaecde178c"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxdzjlKBFEYhdGLkaGBgYGBioiIiPOs3c7z1M6paOwW3tLeklyCitVCnYLi
cvj4qRp/++x9DCR5/3l/9+/56rQ33b8ZanYQ93es2WE8gkexO4En8RSexjN4
Fs/hebyAF/ESXsYreBWv4XW8gTfxFv+9jXfwLu7gbtsFZ4+Os0/HOaD33f/O
YdsF54iOc0zHOWn2pek4p3ScMzrOOR3ngo5zSce5ouNc03Fu6Di3bXdxwRXn
jntccMXpcY8Lrjj33OOCK84D97jgivPIPS644jxxjwuuOM/c44Irdru44Ord
67+/ARNNf4E=
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668],
       AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668],
       AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 100.}, {0, 96.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.7715865354753127`*^9, {3.7716026389646263`*^9, 3.7716026462412443`*^9}, 
   3.7716945507329206`*^9, 3.771754333608441*^9, 3.7717544877334375`*^9, 
   3.7717546192348833`*^9, {3.7718967271890564`*^9, 3.771896737864676*^9}},
 CellLabel->
  "Out[103]=",ExpressionUUID->"b26e20bf-b67a-4669-836c-fa02018e51ea"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
3.2 - Generate Table of Pattern Periods of Diagonals | O(m*Log(n)) Devised \
Algorithm (based on Binary Search)\
\>", "Subsection",
 CellChangeTimes->{{3.7715233378441424`*^9, 3.771523356354638*^9}, {
   3.7715858398303013`*^9, 3.77158585453246*^9}, {3.7715859552978973`*^9, 
   3.7715859570502834`*^9}, {3.7715862278468547`*^9, 3.771586236837494*^9}, 
   3.7715862858379464`*^9, {3.7717622231934834`*^9, 3.7717622245179195`*^9}, {
   3.771772385439399*^9, 3.7717724644346523`*^9}, {3.771772513239915*^9, 
   3.7717725226613965`*^9}, {3.7717725870332766`*^9, 3.771772587636135*^9}, {
   3.7717735770319557`*^9, 3.7717735863657465`*^9}, {3.7717744113352423`*^9, 
   3.7717744114636993`*^9}},ExpressionUUID->"ed7a26ef-5a89-465b-aee1-\
db60fb828246"],

Cell[TextData[{
 "As in section 3.1, ",
 StyleBox["n",
  FontWeight->"Bold"],
 " denotes the number of diagonals to be assessed. For n = 200, the algorithm \
will return a list of 200 elements containing pattern data for diagonals of \
depth 1...200."
}], "CodeText",
 CellChangeTimes->{{3.771773990032111*^9, 
  3.771774085385646*^9}},ExpressionUUID->"871ab0b5-2cd4-4c21-8c8b-\
a6a8520a3dbb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"n", " ", "=", " ", "4000"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.7715213017792735`*^9, 3.7715213207066617`*^9}, 
   3.771521355918544*^9, {3.771546960591114*^9, 3.7715469607506733`*^9}, {
   3.7715810370407124`*^9, 3.771581037367896*^9}, {3.7715866938314905`*^9, 
   3.7715866957562833`*^9}, 3.7716945974634743`*^9, 3.7716968376391735`*^9, {
   3.7717708197426453`*^9, 3.771770845056572*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"63f701f7-d065-49b9-bfb5-f0f18e5fff62"],

Cell[TextData[{
 StyleBox["BreakpointSearch",
  FontWeight->"Bold"],
 " is a function that finds the bounds of the leftmost stretch of one unique \
element in the interval st...end. Modeled off a binary search, the function \
can identify breakpoints in approximately log(n) comparisons, which is more \
efficient in terms of time than the naive approach."
}], "CodeText",
 CellChangeTimes->{{3.771773135356645*^9, 3.771773138331922*^9}, {
  3.771773222357849*^9, 3.7717733236002674`*^9}, {3.7717734607339573`*^9, 
  3.771773541826118*^9}},ExpressionUUID->"fb9d4560-5864-47f5-8072-\
08c221338469"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BreakpointSearch", "[", 
   RowBox[{"st_", ",", "stval_", ",", "end_", ",", "endval_", ",", "f_"}], 
   "]"}], ":=", "  ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"stval", "\[Equal]", "endval"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"end", "+", "1"}], ",", 
      RowBox[{"-", "1"}]}], "}"}], ",", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"st", " ", "==", " ", 
       RowBox[{"end", "-", "1"}]}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"st", "+", "1"}], ",", 
        RowBox[{"f", "[", 
         RowBox[{"st", "+", "1"}], "]"}]}], "}"}], ",", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"mid", "=", 
           RowBox[{"Floor", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"st", "+", "end"}], ")"}], "/", "2"}], "]"}]}], ",", 
          RowBox[{"midval", "=", 
           RowBox[{"f", "[", 
            RowBox[{"Floor", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"st", "+", "end"}], ")"}], "/", "2"}], "]"}], 
            "]"}]}]}], "}"}], ",", 
        RowBox[{"If", "[", " ", 
         RowBox[{
          RowBox[{"endval", "\[Equal]", "midval"}], ",", 
          RowBox[{"BreakpointSearch", "[", 
           RowBox[{"st", ",", "stval", ",", "mid", ",", "midval", ",", "f"}], 
           "]"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"stval", "\[Equal]", "midval"}], ",", 
            RowBox[{"BreakpointSearch", "[", 
             RowBox[{
             "mid", ",", "midval", ",", "end", ",", "endval", ",", "f"}], 
             "]"}], ",", 
            RowBox[{"BreakpointSearch", "[", 
             RowBox[{
             "st", ",", "stval", ",", "mid", ",", "midval", ",", "f"}], 
             "]"}]}], "]"}]}], "]"}]}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.771503988043126*^9, 3.771504026427167*^9}, {
   3.7715040930779*^9, 3.771504122631919*^9}, {3.7715041661275716`*^9, 
   3.771504232575882*^9}, {3.771504263306759*^9, 3.7715042713642073`*^9}, {
   3.771504332175558*^9, 3.771504334176261*^9}, {3.7715044038020687`*^9, 
   3.7715044118704576`*^9}, {3.7715044523133087`*^9, 
   3.7715045055070763`*^9}, {3.771504580963302*^9, 3.771504675141474*^9}, {
   3.7715047258329225`*^9, 3.7715047857329755`*^9}, {3.7715048260694256`*^9, 
   3.7715049232053347`*^9}, {3.771504954639282*^9, 3.771505087810999*^9}, {
   3.7715051670733232`*^9, 3.7715052575703335`*^9}, {3.771505350578581*^9, 
   3.7715053840391054`*^9}, 3.7715096155942097`*^9, 3.7715099411318984`*^9, 
   3.7715102377785163`*^9, {3.7715116381089*^9, 3.7715116668929405`*^9}, {
   3.771511963664514*^9, 3.7715119639633927`*^9}, {3.771512536630103*^9, 
   3.771512631101509*^9}, {3.77151334944518*^9, 3.7715133979714565`*^9}, {
   3.771513471299513*^9, 3.771513521350527*^9}, {3.7715137462600565`*^9, 
   3.7715137741323647`*^9}, {3.771513843948717*^9, 3.771513852130805*^9}, {
   3.7715138844539957`*^9, 3.771513887135187*^9}, 3.7715139984216537`*^9, {
   3.7715141532017326`*^9, 3.771514180783252*^9}, {3.7715142657628155`*^9, 
   3.7715143169938216`*^9}, {3.7715143542802515`*^9, 3.771514363252125*^9}, {
   3.7715145417304163`*^9, 3.7715146070358047`*^9}, {3.771514681729059*^9, 
   3.771514684922516*^9}, {3.771514752517766*^9, 3.771514781818425*^9}, 
   3.771514978241528*^9, {3.7715152180614395`*^9, 3.771515260780212*^9}, {
   3.7715166761606236`*^9, 3.771516684019579*^9}, {3.7715177524924955`*^9, 
   3.771517767601095*^9}, {3.771517808784265*^9, 3.7715178098304677`*^9}, {
   3.771517921118887*^9, 3.771517956117342*^9}, {3.7715180379365244`*^9, 
   3.7715180485432043`*^9}, {3.771518086024972*^9, 3.771518146396504*^9}, {
   3.771522517432927*^9, 3.771522517934558*^9}, {3.7715803813212214`*^9, 
   3.77158044616167*^9}, {3.7715804837953014`*^9, 3.771580545743224*^9}, {
   3.771695332834807*^9, 3.7716953900406413`*^9}, {3.7716954333376455`*^9, 
   3.7716954833355656`*^9}, {3.7717731547687564`*^9, 
   3.7717731868883133`*^9}, {3.771773550467209*^9, 
   3.7717735512175326`*^9}},ExpressionUUID->"239f62b4-21f8-499a-9899-\
f77ff12348b5"],

Cell[TextData[{
 StyleBox["bpoints",
  FontWeight->"Bold"],
 " - list of breakpoints denoting stretches of constant numerical data."
}], "CodeText",
 CellChangeTimes->{{3.771773622774572*^9, 
  3.771773633335389*^9}},ExpressionUUID->"345a3087-fda6-47b4-b7ff-\
87f7a06a0502"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"bpoints", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"DiagonalPatternPeriod", "[", "1", "]"}]}], "}"}], "}"}]}], 
  ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.771516692013544*^9, 3.7715167403070636`*^9}, {
   3.771517221577352*^9, 3.771517247976761*^9}, 3.7715177861488347`*^9, 
   3.771517930949849*^9, {3.7715181837017794`*^9, 3.7715181919082317`*^9}, {
   3.7715182252626104`*^9, 3.771518234069066*^9}, 3.77151928122817*^9, {
   3.771519325885412*^9, 3.771519326064932*^9}, 3.771521258676529*^9, 
   3.7715213207066617`*^9, {3.7715469158937063`*^9, 3.7715469190711217`*^9}, 
   3.7715484950779715`*^9, {3.7716954991850753`*^9, 3.77169550449979*^9}, {
   3.7716955804514055`*^9, 3.771695638541108*^9}, {3.7717736384646525`*^9, 
   3.771773638814871*^9}},ExpressionUUID->"74f610a0-c81c-4892-bc76-\
23cae618cc61"],

Cell[BoxData[
 RowBox[{
  RowBox[{"temp", " ", "=", "  ", 
   RowBox[{"DiagonalPatternPeriod", "[", "n", "]"}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.771580854360927*^9, 3.7715808692976503`*^9}, {
  3.771580909477192*^9, 3.771580918189889*^9}, {3.771581043526596*^9, 
  3.7715810438219137`*^9}, {3.771770871958085*^9, 
  3.7717708722907686`*^9}},ExpressionUUID->"a25119b2-5a2b-4c2c-a21c-\
eedba1dc842d"]
}, Open  ]],

Cell["\<\
The loop below calls the BreakpointSearch function to compute breakpoints and \
append them to bpoints. Although the loop is running the binary search based \
algorithms multiple times (once for each stretch of values), the periodicity \
of the patterns changes very slowly as you delve deeper into the automaton \
from the left edge, leading to long stretches of the same value. In other \
words,  there are not too many stretches in the data of distinct values in \
relation to the amount of elements we are considering. Therefore, this factor \
can be deemed negligible as it doesn\[CloseCurlyQuote]t greatly affect the \
time complexity.\
\>", "CodeText",
 CellChangeTimes->{{3.7717736775047784`*^9, 
  3.771773846553302*^9}},ExpressionUUID->"ca491561-b3e8-4a41-8d14-\
e0ec94d9881f"],

Cell[BoxData[
 RowBox[{"While", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Last", "[", "bpoints", "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], "\[NotEqual]", 
    RowBox[{"n", "+", "1"}]}], ",", 
   RowBox[{"AppendTo", "[", 
    RowBox[{"bpoints", ",", 
     RowBox[{"BreakpointSearch", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Last", "[", "bpoints", "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", 
       RowBox[{"DiagonalPatternPeriod", "[", 
        RowBox[{
         RowBox[{"Last", "[", "bpoints", "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", "n", ",", "temp", ",", 
       "DiagonalPatternPeriod"}], "]"}]}], "]"}]}], "]"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.7715169399674807`*^9, 3.7715170124306097`*^9}, {
   3.7715171024194183`*^9, 3.771517156359818*^9}, {3.771517206490694*^9, 
   3.7715172167323565`*^9}, {3.771517257486375*^9, 3.7715172594520793`*^9}, 
   3.7715173729407573`*^9, {3.7715176604890757`*^9, 3.771517661136032*^9}, {
   3.7715177920739474`*^9, 3.771517797297013*^9}, {3.771517934003467*^9, 
   3.7715179623297367`*^9}, {3.771518168605153*^9, 3.7715181763753314`*^9}, 
   3.7715213207076607`*^9, {3.771546923817432*^9, 3.7715469260345025`*^9}, {
   3.7715805783181286`*^9, 3.771580645867544*^9}, {3.771580781517209*^9, 
   3.771580794348489*^9}, {3.77158089416614*^9, 3.77158089436456*^9}, {
   3.7715810486029863`*^9, 3.77158105412134*^9}, {3.7717708773466463`*^9, 
   3.771770881293892*^9}, {3.7717731950612864`*^9, 
   3.7717731969669676`*^9}},ExpressionUUID->"47362c3f-643b-4a46-8c33-\
40737f61f703"],

Cell[TextData[{
 StyleBox["condensedprddata",
  FontWeight->"Bold"],
 " - a neat representation of diagonal periods from 1...n. \n\nThe list \
contains breakpoints in the form of two element lists {{a1,b1},{a2,b2}...} \
where in {a,b}\n\ta: number of times b occurs\n\tb: value of the period for \
that set of consecutive diagonals\n\nNote: condensedprddata is structured to \
display all breakpoints and pattern periods in the order they occur \
(traversing from diagonal 1...n)"
}], "CodeText",
 CellChangeTimes->{{3.7717738729025354`*^9, 3.7717739088613973`*^9}, {
  3.7718813729851427`*^9, 
  3.771881373330221*^9}},ExpressionUUID->"08820c9b-61f7-4c71-b819-\
4045aa160acd"],

Cell[BoxData[
 RowBox[{"condensedprddata", " ", "=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"bpoints", "[", 
         RowBox[{"[", "x", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}], "-", 
       RowBox[{
        RowBox[{"bpoints", "[", 
         RowBox[{"[", 
          RowBox[{"x", "-", "1"}], "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ",", 
      RowBox[{
       RowBox[{"bpoints", "[", 
        RowBox[{"[", 
         RowBox[{"x", "-", "1"}], "]"}], "]"}], "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "2", ",", 
      RowBox[{"Length", "[", "bpoints", "]"}]}], "}"}]}], "]"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.7715176725724525`*^9, 3.771517673362364*^9}, {
   3.771518756777155*^9, 3.771518774765188*^9}, {3.7715188104306865`*^9, 
   3.771518939830671*^9}, {3.7715190197938523`*^9, 3.7715190437958384`*^9}, 
   3.7715213207086573`*^9, 3.771585500685226*^9},
 CellLabel->"In[33]:=",ExpressionUUID->"d05a02f4-c231-485a-bfb5-9994c35454a9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"23", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"12", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "32"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2106", ",", "96"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1849", ",", "192"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7715855332415285`*^9, 3.7715910422940063`*^9, 
  3.7716199710713954`*^9, 3.7716241163912907`*^9, 3.771694779269656*^9, 
  3.7717021598113585`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"5d076d7f-2c96-4eb2-96a1-17d580611087"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["4. Visualizing  & Analyzing the Pattern Periodicity Data", "Section",
 CellChangeTimes->{{3.7717602159698343`*^9, 3.771760218712676*^9}, {
  3.771760252015457*^9, 3.7717602572633944`*^9}, {3.7717745418011675`*^9, 
  3.771774573737287*^9}, {3.7718090414966936`*^9, 3.7718090466588864`*^9}, {
  3.7718606361681576`*^9, 3.771860639597496*^9}, {3.771865843981025*^9, 
  3.77186584647857*^9}},ExpressionUUID->"26544d9a-058d-49a7-98fb-\
94c394cb96ba"],

Cell[CellGroupData[{

Cell["4.1 - Visualizing Diagonals and Pattern Data", "Subsection",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.7718462944206257`*^9, 3.771846305586587*^9}, {
  3.7718987575469427`*^9, 3.7718987718474293`*^9}, {3.7718988732023616`*^9, 
  3.7718988929620676`*^9}},ExpressionUUID->"74f4376a-204b-4c1a-897f-\
c6634c26e476"],

Cell[TextData[{
 "The following three program statements generate a visualization of how \
patterns are processed as diagonals are swept from the left edge. Set the \
number of generations by updating the variable ",
 StyleBox["numgenvisual",
  FontWeight->"Bold"],
 ". Then, run the three statements (which have already been grouped together) \
to produce the visualization.\n\nUse the sliders to explore the automaton. \
The first slider controls the variable diagnumber, which corresponds to which \
diagonal you choose to process. Increasing this slider will sweep the \
highlighted diagonal deeper and towards the right into the automaton. The \
other sliders are used to pan and zoom.\n\nWhen a given diagonal is \
highlighted, red cells denote the white cells in the automaton, and blue \
cells denote the black cells in the automaton. Observe the rate, increments, \
and regions of the automaton in which there exist changes in periodicity. "
}], "CodeText",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.771899339356583*^9, 3.771899420543321*^9}, {
   3.771899536643964*^9, 3.7718997728217382`*^9}, 
   3.771899876793842*^9},ExpressionUUID->"175de5fc-6bf8-491a-bf61-\
3040eff62655"],

Cell[BoxData[
 RowBox[{
  RowBox[{"numgenvisual", " ", "=", " ", "500"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.771782600164423*^9, 3.771782602126548*^9}, {
   3.771782950437174*^9, 3.771782998060666*^9}, 3.771791173170803*^9, 
   3.771792620870758*^9, 3.771792815037345*^9, {3.771810047275165*^9, 
   3.771810047321847*^9}, 3.7718100942586303`*^9, {3.7718110512555084`*^9, 
   3.7718110519725904`*^9}, {3.771811136528338*^9, 3.7718111417583733`*^9}, 
   3.771813212753769*^9, {3.771814556886856*^9, 3.771814557051445*^9}, {
   3.771840277363969*^9, 3.771840277707218*^9}, {3.771840372829482*^9, 
   3.7718403729027743`*^9}, {3.77184042155063*^9, 3.771840421637838*^9}, 
   3.771840484230672*^9, 3.77184053460962*^9, {3.77184570183783*^9, 
   3.771845708185604*^9}, {3.7718606743313665`*^9, 3.7718606878863473`*^9}, {
   3.771860804830371*^9, 3.7718608511594105`*^9}, {3.7718615279248896`*^9, 
   3.771861528104924*^9}, {3.771896150393883*^9, 3.7718961506283555`*^9}, {
   3.7718981239118915`*^9, 3.771898124286805*^9}, {3.7718982139862447`*^9, 
   3.7718982141579294`*^9}, 3.7718988929620676`*^9, {3.771899160137233*^9, 
   3.7718991684055614`*^9}, {3.771899275028363*^9, 3.771899275028363*^9}, 
   3.771899493981627*^9, 3.771899876793842*^9},
 CellLabel->
  "In[175]:=",ExpressionUUID->"0c08d3c7-c792-48d4-8824-7bdba127cd06"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cavisual", " ", "=", " ", 
   RowBox[{"CellularAutomaton", "[", 
    RowBox[{"45", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", "0"}], "}"}], ",", "numgenvisual"}], 
    "]"}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.771782494317606*^9, 3.771782508584335*^9}, 
   3.771782569548852*^9, {3.771782603854018*^9, 3.7717826044577093`*^9}, {
   3.771809307121931*^9, 3.7718093075488205`*^9}, 3.771813212754768*^9, 
   3.77184570183783*^9, 3.7718988929620676`*^9, 3.771899160137233*^9, 
   3.771899502277631*^9, 3.771899876793842*^9, {3.7719004823574996`*^9, 
   3.771900491357019*^9}},ExpressionUUID->"6a13d7b3-adda-4bd1-8dfd-\
29bdf5850e8a"],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cap0", "=", "cavisual"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{"xpt", " ", "=", " ", 
       RowBox[{
        RowBox[{"FindTransientRepeat", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"cavisual", "[", 
              RowBox[{"[", 
               RowBox[{"x", "+", "dn", "-", "1"}], "]"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"Round", "[", 
                RowBox[{"numgenvisual", "/", "2"}], "]"}], "+", "1", "+", 
               "dn", "-", "1", "-", 
               RowBox[{"Ceiling", "[", 
                RowBox[{"x", "/", "2"}], "]"}], "+", "1"}], "]"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", "1", ",", 
              RowBox[{"numgenvisual", "-", "dn", "+", "2"}]}], "}"}]}], "]"}],
           ",", "2"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\n", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"cap0", "[", 
              RowBox[{"[", 
               RowBox[{"x", "+", "dn", "-", "1"}], "]"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"Round", "[", 
                RowBox[{"numgenvisual", "/", "2"}], "]"}], "+", "1", "+", 
               "dn", "-", "1", "-", 
               RowBox[{"Ceiling", "[", 
                RowBox[{"x", "/", "2"}], "]"}], "+", "1"}], "]"}], "]"}], 
            "\[Equal]", " ", "1"}], ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"cap0", "[", 
              RowBox[{"[", 
               RowBox[{"x", "+", "dn", "-", "1"}], "]"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"Round", "[", 
                RowBox[{"numgenvisual", "/", "2"}], "]"}], "+", "1", "+", 
               "dn", "-", "1", "-", 
               RowBox[{"Ceiling", "[", 
                RowBox[{"x", "/", "2"}], "]"}], "+", "1"}], "]"}], "]"}], " ",
             "=", " ", "2"}], ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"cap0", "[", 
              RowBox[{"[", 
               RowBox[{"x", "+", "dn", "-", "1"}], "]"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"Round", "[", 
                RowBox[{"numgenvisual", "/", "2"}], "]"}], "+", "1", "+", 
               "dn", "-", "1", "-", 
               RowBox[{"Ceiling", "[", 
                RowBox[{"x", "/", "2"}], "]"}], "+", "1"}], "]"}], "]"}], " ",
             "=", "3"}]}], "]"}], ";"}], " ", ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "1", ",", 
          RowBox[{"numgenvisual", "-", "dn", "+", "2"}]}], "}"}]}], "]"}], 
      ";", "\n", 
      RowBox[{"Column", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Row", "[", 
          RowBox[{"xpt", "/.", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"1", "\[Rule]", "Red"}], ",", 
             RowBox[{"0", "\[Rule]", "Blue"}]}], "}"}]}], "]"}], ",", " ", 
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{"\"\<Periodicity: \>\"", " ", "<>", " ", 
            RowBox[{"ToString", "[", 
             RowBox[{"Length", "[", "xpt", "]"}], "]"}]}], ",", "20"}], "]"}],
          ",", 
         RowBox[{"ArrayPlot", "[", 
          RowBox[{"cap0", ",", 
           RowBox[{"ColorRules", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"0", "\[Rule]", "White"}], ",", 
              RowBox[{"1", "\[Rule]", "Black"}], ",", 
              RowBox[{"2", "\[Rule]", "Blue"}], ",", 
              RowBox[{"3", "\[Rule]", "Red"}]}], "}"}]}], ",", 
           RowBox[{"PlotRange", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"numgenvisual", "*", "zoom"}], "+", "ypos"}], ",", 
                RowBox[{
                 RowBox[{"numgenvisual", "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "-", "zoom"}], ")"}]}], "+", "ypos"}]}], 
               "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"numgenvisual", "*", "zoom"}], "+", "xpos"}], ",", 
                RowBox[{
                 RowBox[{"numgenvisual", "*", 
                  RowBox[{"(", 
                   RowBox[{"1", "-", "zoom"}], ")"}]}], "+", "xpos"}]}], 
               "}"}]}], "}"}]}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
           RowBox[{"Frame", "\[Rule]", "False"}]}], "]"}]}], "}"}], "]"}]}]}],
     "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dn", ",", " ", "1", ",", " ", "\"\<Depth (diagnumber)\>\""}], 
      "}"}], ",", "1", ",", 
     RowBox[{"Round", "[", 
      RowBox[{"numgenvisual", "*", "0.15"}], "]"}], ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", " ", "\"\<Open\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"zoom", ",", "0.1", ",", "\"\<Zoom\>\""}], "}"}], ",", "0.1", 
     ",", "0.49", ",", "0.01"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"xpos", ",", "0", ",", "\"\<Pan X\>\""}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "numgenvisual"}], "*", "zoom"}], "+", "1"}], ",", 
     RowBox[{
      RowBox[{"numgenvisual", "*", "zoom"}], "-", "1"}], ",", "1"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"ypos", ",", "0", ",", "\"\<Pan Y\>\""}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "numgenvisual"}], "*", "zoom"}], "+", "1"}], ",", 
     RowBox[{
      RowBox[{"numgenvisual", "*", "zoom"}], "-", "1"}], ",", "1"}], "}"}], 
   ",", 
   RowBox[{"AppearanceElements", "\[Rule]", "\"\<SnapshotButton\>\""}], ",", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"None", ",", "None"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"None", ",", 
        RowBox[{"Style", "[", 
         RowBox[{
         "\"\<Visualization of Pattern Periodicity in Rule 45 Elementary CA\>\
\"", ",", "Red", ",", "20", ",", "Bold", ",", "Italic"}], "]"}]}], "}"}]}], 
     "}"}]}]}], "]"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.771792830219911*^9, 3.7717928975914803`*^9}, 
   3.7718100551654034`*^9, {3.771810791387864*^9, 3.7718108210066423`*^9}, {
   3.771810934590681*^9, 3.7718110069191513`*^9}, {3.771811082954691*^9, 
   3.7718110835580745`*^9}, {3.771811127342916*^9, 3.7718111303059855`*^9}, {
   3.771813368233455*^9, 3.7718133778848667`*^9}, {3.771813452509444*^9, 
   3.7718134710412292`*^9}, {3.771813506086981*^9, 3.7718135219320707`*^9}, {
   3.771813617769599*^9, 3.771813681566243*^9}, {3.7718137229152174`*^9, 
   3.7718137405023584`*^9}, {3.771813822912735*^9, 3.771813829968566*^9}, {
   3.7718138805529375`*^9, 3.7718140172275558`*^9}, {3.771814049102193*^9, 
   3.7718140794549236`*^9}, {3.7718141118994226`*^9, 3.771814112916621*^9}, {
   3.771845211023686*^9, 3.771845258944647*^9}, {3.771845302555619*^9, 
   3.7718453293892126`*^9}, {3.7718453694889336`*^9, 
   3.7718454270020103`*^9}, {3.771845459488261*^9, 3.7718454620629597`*^9}, {
   3.771845496830897*^9, 3.7718455472005796`*^9}, 3.7718455862194304`*^9, {
   3.7718456505341473`*^9, 3.7718456514403467`*^9}, 3.77184570183783*^9, 
   3.771845984892381*^9, {3.771846035501408*^9, 3.771846066283987*^9}, {
   3.7718499975458055`*^9, 3.771850007887904*^9}, {3.771850061099684*^9, 
   3.7718501007844367`*^9}, {3.7718510738779216`*^9, 
   3.7718510784820576`*^9}, {3.7718609405085125`*^9, 3.771860953637291*^9}, {
   3.771861032907957*^9, 3.771861035688707*^9}, {3.771861113015518*^9, 
   3.7718611148173437`*^9}, {3.771861711480859*^9, 3.7718617221501603`*^9}, {
   3.7718623077491627`*^9, 3.771862334742696*^9}, {3.7718624005757246`*^9, 
   3.7718624080069127`*^9}, {3.7718953681768084`*^9, 
   3.7718954119735813`*^9}, {3.771895467062197*^9, 3.7718954942942963`*^9}, {
   3.771895552557415*^9, 3.7718955808018055`*^9}, {3.7718956498748035`*^9, 
   3.7718956553746824`*^9}, {3.7718956985033646`*^9, 
   3.7718957759307585`*^9}, {3.7718958101636105`*^9, 
   3.7718958305365376`*^9}, {3.7718960513383284`*^9, 3.771896102270973*^9}, {
   3.7718961920609074`*^9, 3.7718962172060633`*^9}, {3.7718962570341754`*^9, 
   3.771896340410585*^9}, {3.7718964056655045`*^9, 3.771896415416519*^9}, {
   3.7718964585839577`*^9, 3.771896483283388*^9}, {3.7718965163614616`*^9, 
   3.7718965228328643`*^9}, {3.771896567409542*^9, 3.771896599697548*^9}, 
   3.7718966348008795`*^9, {3.7718967806942644`*^9, 3.7718967812411885`*^9}, {
   3.7718968195489655`*^9, 3.7718968428841534`*^9}, {3.7718969604564667`*^9, 
   3.771897030225459*^9}, {3.7718970618411455`*^9, 3.771897155420067*^9}, {
   3.771897266247489*^9, 3.7718972785178585`*^9}, {3.7718973690021477`*^9, 
   3.7718973698465204`*^9}, {3.7718974005097775`*^9, 
   3.7718974230987897`*^9}, {3.7718974589482126`*^9, 
   3.7718975087472706`*^9}, {3.771897542507616*^9, 3.7718976346765804`*^9}, {
   3.771897713193246*^9, 3.7718977237762685`*^9}, {3.7718977662573895`*^9, 
   3.7718977964049044`*^9}, {3.771897864599489*^9, 3.771897921438761*^9}, {
   3.7718980258164396`*^9, 3.771898068238925*^9}, {3.771898159131037*^9, 
   3.7718981955257807`*^9}, 3.771898329736166*^9, {3.771898382867423*^9, 
   3.771898392747196*^9}, 3.771898892963065*^9, 3.771899116815217*^9, 
   3.771899160137233*^9, {3.7718992029508643`*^9, 3.771899209671163*^9}, {
   3.7718992540427923`*^9, 3.771899272231649*^9}, {3.771899506824741*^9, 
   3.7718995203635483`*^9}, {3.7718998016309643`*^9, 3.771899809298798*^9}, 
   3.7718998767948437`*^9},
 CellLabel->
  "In[177]:=",ExpressionUUID->"a53572bd-7686-4c0e-9a7a-19b178cccd87"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`dn$$ = 1, $CellContext`xpos$$ = 
    0, $CellContext`ypos$$ = 0, $CellContext`zoom$$ = 0.1, Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`dn$$], 1, "Depth (diagnumber)"}, 1, 75, 1}, {{
       Hold[$CellContext`zoom$$], 0.1, "Zoom"}, 0.1, 0.49, 0.01}, {{
       Hold[$CellContext`xpos$$], 0, "Pan X"}, 
      Dynamic[(-$CellContext`numgenvisual) $CellContext`zoom$$ + 1], 
      Dynamic[$CellContext`numgenvisual $CellContext`zoom$$ - 1], 1}, {{
       Hold[$CellContext`ypos$$], 0, "Pan Y"}, 
      Dynamic[(-$CellContext`numgenvisual) $CellContext`zoom$$ + 1], 
      Dynamic[$CellContext`numgenvisual $CellContext`zoom$$ - 1], 1}}, 
    Typeset`size$$ = {576., {305., 311.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`dn$186081$$ = 0, $CellContext`zoom$186082$$ = 
    0, $CellContext`xpos$186083$$ = 0, $CellContext`ypos$186084$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`dn$$ = 1, $CellContext`xpos$$ = 
        0, $CellContext`ypos$$ = 0, $CellContext`zoom$$ = 0.1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`dn$$, $CellContext`dn$186081$$, 0], 
        Hold[$CellContext`zoom$$, $CellContext`zoom$186082$$, 0], 
        Hold[$CellContext`xpos$$, $CellContext`xpos$186083$$, 0], 
        Hold[$CellContext`ypos$$, $CellContext`ypos$186084$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`cap0$ = $CellContext`cavisual}, $CellContext`xpt = 
         Part[
           FindTransientRepeat[
            Table[
             Part[
              
              Part[$CellContext`cavisual, $CellContext`x + $CellContext`dn$$ - 
               1], Round[$CellContext`numgenvisual/2] + 1 + $CellContext`dn$$ - 
              1 - Ceiling[$CellContext`x/2] + 1], {$CellContext`x, 
              1, $CellContext`numgenvisual - $CellContext`dn$$ + 2}], 2], 2]; 
        Table[If[Part[
              
              Part[$CellContext`cap0$, $CellContext`x + $CellContext`dn$$ - 
               1], Round[$CellContext`numgenvisual/2] + 1 + $CellContext`dn$$ - 
              1 - Ceiling[$CellContext`x/2] + 1] == 1, Part[
              
              Part[$CellContext`cap0$, $CellContext`x + $CellContext`dn$$ - 
               1], Round[$CellContext`numgenvisual/2] + 1 + $CellContext`dn$$ - 
              1 - Ceiling[$CellContext`x/2] + 1] = 2, Part[
              
              Part[$CellContext`cap0$, $CellContext`x + $CellContext`dn$$ - 
               1], Round[$CellContext`numgenvisual/2] + 1 + $CellContext`dn$$ - 
              1 - Ceiling[$CellContext`x/2] + 1] = 3]; 
          Null, {$CellContext`x, 
           1, $CellContext`numgenvisual - $CellContext`dn$$ + 2}]; Column[{
           Row[
            ReplaceAll[$CellContext`xpt, {1 -> Red, 0 -> Blue}]], 
           Style[
            StringJoin["Periodicity: ", 
             ToString[
              Length[$CellContext`xpt]]], 20], 
           
           ArrayPlot[$CellContext`cap0$, 
            ColorRules -> {0 -> White, 1 -> Black, 2 -> Blue, 3 -> Red}, 
            PlotRange -> {{$CellContext`numgenvisual $CellContext`zoom$$ + \
$CellContext`ypos$$, $CellContext`numgenvisual (
                 1 - $CellContext`zoom$$) + $CellContext`ypos$$}, \
{$CellContext`numgenvisual $CellContext`zoom$$ + $CellContext`xpos$$, \
$CellContext`numgenvisual (1 - $CellContext`zoom$$) + $CellContext`xpos$$}}, 
            ImageSize -> Large, Frame -> False]}]], 
      "Specifications" :> {{{$CellContext`dn$$, 1, "Depth (diagnumber)"}, 1, 
         75, 1, Appearance -> "Open"}, {{$CellContext`zoom$$, 0.1, "Zoom"}, 
         0.1, 0.49, 0.01}, {{$CellContext`xpos$$, 0, "Pan X"}, 
         Dynamic[(-$CellContext`numgenvisual) $CellContext`zoom$$ + 1], 
         Dynamic[$CellContext`numgenvisual $CellContext`zoom$$ - 1], 
         1}, {{$CellContext`ypos$$, 0, "Pan Y"}, 
         Dynamic[(-$CellContext`numgenvisual) $CellContext`zoom$$ + 1], 
         Dynamic[$CellContext`numgenvisual $CellContext`zoom$$ - 1], 1}}, 
      "Options" :> {
       AppearanceElements -> "SnapshotButton", 
        FrameLabel -> {{None, None}, {None, 
           Style[
           "Visualization of Pattern Periodicity in Rule 45 Elementary CA", 
            RGBColor[1, 0, 0], 20, Bold, Italic]}}}, "DefaultOptions" :> {}],
     ImageSizeCache->{627., {419., 425.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{
  3.7718452628524847`*^9, {3.7718453048044076`*^9, 3.7718453174539104`*^9}, {
   3.771845429983781*^9, 3.771845433825381*^9}, 3.7718454638641825`*^9, {
   3.7718454998871603`*^9, 3.771845553098446*^9}, {3.77184558832428*^9, 
   3.7718455911102276`*^9}, {3.7718456524340553`*^9, 3.771845656136314*^9}, {
   3.7718457045454617`*^9, 3.7718457120692654`*^9}, 3.771845986948007*^9, {
   3.77184603061891*^9, 3.771846066850444*^9}, {3.7718498821778555`*^9, 
   3.771849891506315*^9}, 3.771850011946897*^9, {3.7718500632129593`*^9, 
   3.771850102328168*^9}, 3.7718501677774935`*^9, 3.7718503168487396`*^9, 
   3.7718510809035673`*^9, {3.771860661664669*^9, 3.771860677421781*^9}, {
   3.771860789977792*^9, 3.7718608546029186`*^9}, 3.771860954689577*^9, 
   3.7718610361281986`*^9, 3.771861117568043*^9, 3.7718615361020775`*^9, 
   3.771861724073098*^9, {3.7718623113873816`*^9, 3.771862335960413*^9}, 
   3.7718624092726603`*^9, {3.7718953550997744`*^9, 3.771895407157503*^9}, {
   3.7718954728995485`*^9, 3.7718954983394713`*^9}, 3.7718956562336693`*^9, {
   3.7718957344605036`*^9, 3.77189577052386*^9}, {3.7718960982067194`*^9, 
   3.7718961210088687`*^9}, 3.7718961542095914`*^9, 3.7718962182842655`*^9, {
   3.7718962608156347`*^9, 3.771896341204611*^9}, 3.771896416213238*^9, 
   3.7718966021071444`*^9, 3.7718966370328455`*^9, 3.7718967845234833`*^9, 
   3.7718968448374863`*^9, {3.771896991560233*^9, 3.7718970307096395`*^9}, 
   3.771897075987093*^9, {3.7718971511041327`*^9, 3.7718971559668083`*^9}, 
   3.77189720721698*^9, 3.7718972796587753`*^9, 3.771897371565691*^9, {
   3.7718974189419236`*^9, 3.771897423989524*^9}, {3.7718974685282536`*^9, 
   3.7718975099663663`*^9}, {3.7718975822412443`*^9, 3.7718976354107776`*^9}, 
   3.7718977246041956`*^9, 3.7718977735046144`*^9, 3.7718978854516144`*^9, {
   3.7718980344927444`*^9, 3.7718980695541735`*^9}, 3.771898127102811*^9, {
   3.7718981626700335`*^9, 3.7718981967609663`*^9}, 3.771898238822418*^9, 
   3.771898332555006*^9, {3.771898376600281*^9, 3.771898393528261*^9}, 
   3.771898775185731*^9, 3.771898892963065*^9, {3.771899161784397*^9, 
   3.771899171246786*^9}, 3.7718992104052105`*^9, {3.7718992436077633`*^9, 
   3.771899277857029*^9}, 3.77189952626377*^9, 3.7718998606934147`*^9},
 CellLabel->
  "Out[177]=",ExpressionUUID->"c84e810e-0f50-4921-a459-de0a7543a028"]
}, Closed]],

Cell[CellGroupData[{

Cell["4.2 - Export GIF", "Subsection",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.},
 CellChangeTimes->{{3.7718580336953945`*^9, 3.7718580426290092`*^9}, 
   3.7718656023684883`*^9, {3.771898781484991*^9, 3.7718987848445435`*^9}, 
   3.7718988463480964`*^9, 
   3.7719006670136003`*^9},ExpressionUUID->"09199ace-f121-4a29-a921-\
219f7dbf4ad3"],

Cell["\<\
Following statements simply generate a GIF animation of sweeping diagonal.\
\>", "CodeText",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.},
 CellChangeTimes->{{3.7719005589292526`*^9, 3.771900590745364*^9}, {
  3.771900650236247*^9, 
  3.7719006670136003`*^9}},ExpressionUUID->"b56128fd-a0b2-4efd-85df-\
e2e91b49f096"],

Cell[BoxData[
 RowBox[{
  RowBox[{"numgengif", " ", "=", " ", "200"}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.},
 CellChangeTimes->{{3.771782600164423*^9, 3.771782602126548*^9}, {
   3.771782950437174*^9, 3.771782998060666*^9}, 3.771791173170803*^9, 
   3.771792620870758*^9, 3.771792815037345*^9, {3.771810047275165*^9, 
   3.771810047321847*^9}, 3.7718100942586303`*^9, {3.7718110512555084`*^9, 
   3.7718110519725904`*^9}, {3.771811136528338*^9, 3.7718111417583733`*^9}, 
   3.771813212753769*^9, {3.771814556886856*^9, 3.771814557051445*^9}, {
   3.771840277363969*^9, 3.771840277707218*^9}, {3.771840372829482*^9, 
   3.7718403729027743`*^9}, {3.77184042155063*^9, 3.771840421637838*^9}, 
   3.771840484230672*^9, 3.77184053460962*^9, {3.77184570183783*^9, 
   3.771845708185604*^9}, {3.771856124924486*^9, 3.77185612509661*^9}, {
   3.7718572874915304`*^9, 3.77185728770414*^9}, {3.771857518291112*^9, 
   3.7718575329793043`*^9}, 3.7719004553051567`*^9, 3.7719005230159087`*^9, 
   3.7719006670136003`*^9},
 CellLabel->
  "In[180]:=",ExpressionUUID->"a18f4e36-51fa-4379-a01d-6b17c356ddfa"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cagif", " ", "=", " ", 
   RowBox[{"CellularAutomaton", "[", 
    RowBox[{"45", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", "0"}], "}"}], ",", "numgengif"}], 
    "]"}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.},
 CellChangeTimes->{{3.771782494317606*^9, 3.771782508584335*^9}, 
   3.771782569548852*^9, {3.771782603854018*^9, 3.7717826044577093`*^9}, {
   3.771809307121931*^9, 3.7718093075488205`*^9}, 3.771813212754768*^9, 
   3.77184570183783*^9, {3.7719004563461065`*^9, 3.771900480171256*^9}, 
   3.7719005230179024`*^9, 3.7719006670136003`*^9},
 CellLabel->
  "In[181]:=",ExpressionUUID->"e44baf7e-28a6-4053-9f9c-b49830da2217"],

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"NotebookDirectory", "[", "]"}], "<>", "\"\<filename.gif\>\""}], 
   ",", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"cap0", "=", "cagif"}], "}"}], ",", "\n", 
       RowBox[{
        RowBox[{"xpt", " ", "=", " ", 
         RowBox[{
          RowBox[{"FindTransientRepeat", "[", 
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"cagif", "[", 
                RowBox[{"[", 
                 RowBox[{"x", "+", "dn", "-", "1"}], "]"}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"Round", "[", 
                  RowBox[{"numgengif", "/", "2"}], "]"}], "+", "1", "+", "dn",
                  "-", "1", "-", 
                 RowBox[{"Ceiling", "[", 
                  RowBox[{"x", "/", "2"}], "]"}], "+", "1"}], "]"}], "]"}], 
              ",", 
              RowBox[{"{", 
               RowBox[{"x", ",", "1", ",", 
                RowBox[{"numgengif", "-", "dn", "+", "2"}]}], "}"}]}], "]"}], 
            ",", "2"}], "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ";", "\n", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"cap0", "[", 
                RowBox[{"[", 
                 RowBox[{"x", "+", "dn", "-", "1"}], "]"}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"Round", "[", 
                  RowBox[{"numgengif", "/", "2"}], "]"}], "+", "1", "+", "dn",
                  "-", "1", "-", 
                 RowBox[{"Ceiling", "[", 
                  RowBox[{"x", "/", "2"}], "]"}], "+", "1"}], "]"}], "]"}], 
              "\[Equal]", " ", "1"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"cap0", "[", 
                RowBox[{"[", 
                 RowBox[{"x", "+", "dn", "-", "1"}], "]"}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"Round", "[", 
                  RowBox[{"numgengif", "/", "2"}], "]"}], "+", "1", "+", "dn",
                  "-", "1", "-", 
                 RowBox[{"Ceiling", "[", 
                  RowBox[{"x", "/", "2"}], "]"}], "+", "1"}], "]"}], "]"}], 
              " ", "=", " ", "2"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"cap0", "[", 
                RowBox[{"[", 
                 RowBox[{"x", "+", "dn", "-", "1"}], "]"}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"Round", "[", 
                  RowBox[{"numgengif", "/", "2"}], "]"}], "+", "1", "+", "dn",
                  "-", "1", "-", 
                 RowBox[{"Ceiling", "[", 
                  RowBox[{"x", "/", "2"}], "]"}], "+", "1"}], "]"}], "]"}], 
              " ", "=", "3"}]}], "]"}], ";"}], " ", ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "1", ",", 
            RowBox[{"numgengif", "-", "dn", "+", "2"}]}], "}"}]}], "]"}], ";",
         "\n", 
        RowBox[{"Column", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ArrayPlot", "[", 
            RowBox[{"cap0", ",", 
             RowBox[{"ColorRules", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"0", "\[Rule]", "White"}], ",", 
                RowBox[{"1", "\[Rule]", "Black"}], ",", 
                RowBox[{"2", "\[Rule]", "Blue"}], ",", 
                RowBox[{"3", "\[Rule]", "Red"}]}], "}"}]}], ",", 
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"numgengif", "*", "0.2"}], ",", 
                  RowBox[{"numgengif", "*", "0.7"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"numgengif", "*", "0.2"}], ",", 
                  RowBox[{"numgengif", "*", "0.7"}]}], "}"}]}], "}"}]}], ",", 
             RowBox[{"ImageSize", "\[Rule]", "Full"}]}], "]"}], ",", 
           RowBox[{"ArrayPlot", "[", 
            RowBox[{
             RowBox[{"{", "xpt", "}"}], ",", 
             RowBox[{"Mesh", "\[Rule]", "All"}], ",", 
             RowBox[{"ColorRules", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"0", "\[Rule]", "Red"}], ",", 
                RowBox[{"1", "\[Rule]", "Blue"}]}], "}"}]}], ",", 
             RowBox[{"ImageSize", "\[Rule]", 
              RowBox[{"1", "\[Rule]", "30"}]}]}], "]"}], ",", "  ", 
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"\"\<Periodicity: \>\"", " ", "<>", " ", 
              RowBox[{"ToString", "[", 
               RowBox[{"Length", "[", "xpt", "]"}], "]"}]}], ",", "50"}], 
            "]"}]}], "}"}], "]"}]}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"dn", ",", "1", ",", 
       RowBox[{"Round", "[", 
        RowBox[{"numgengif", "*", "0.2"}], "]"}], ",", "1"}], "}"}]}], "]"}], 
   ",", " ", 
   RowBox[{"\"\<AnimationRepetitions\>\"", "\[Rule]", " ", "Infinity"}]}], 
  "]"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.},
 CellChangeTimes->{{3.7718568027154446`*^9, 3.771856948500969*^9}, {
   3.7718569807003736`*^9, 3.771856981518545*^9}, {3.771857058356474*^9, 
   3.771857084440769*^9}, {3.771857148571512*^9, 3.771857163025673*^9}, {
   3.7718571949878864`*^9, 3.7718572354647503`*^9}, {3.771857294178384*^9, 
   3.7718573852002916`*^9}, {3.771857541876069*^9, 3.7718575420211124`*^9}, {
   3.771857582678505*^9, 3.7718575900244865`*^9}, {3.7718576420930963`*^9, 
   3.7718576603219438`*^9}, {3.771857744330557*^9, 3.7718577496657124`*^9}, {
   3.7718577823697042`*^9, 3.771857785442092*^9}, 3.7718579973283443`*^9, {
   3.7719004568620234`*^9, 3.771900523018886*^9}, 3.7719006670136003`*^9},
 CellLabel->
  "In[182]:=",ExpressionUUID->"73505491-3b3c-4cf6-9f9a-f5acc4e1c1fd"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
4.3 - Checking for Patterns and Patterns in Periodicity of Neighborhoods of \
Cells in Diagonal\
\>", "Subsection",
 CellChangeTimes->{{3.7718657961414356`*^9, 3.771865828797323*^9}, {
  3.771898788606455*^9, 3.7718987887000046`*^9}, {3.771898908515046*^9, 
  3.771898909499857*^9}},ExpressionUUID->"ff8905d6-1e42-4c48-9845-\
f787dcd86ebe"],

Cell["\<\
This is essentially the same as the DiagonalPatternPeriod function, except it \
generates a list of lists of three values from the previous generation (i.e. \
the neighbors).\
\>", "CodeText",
 CellChangeTimes->{{3.7718999991447043`*^9, 
  3.771900069231409*^9}},ExpressionUUID->"76909845-5bd3-4569-b4bb-\
8318f400d251"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ngen2", " ", "=", " ", "500"}], ";"}]], "Input",
 CellChangeTimes->{{3.771861999422411*^9, 3.7718620045118885`*^9}, {
  3.771865426347632*^9, 3.771865426447379*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"6ddf87b2-c1f6-4917-89b0-daa89abe149c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ca2", " ", "=", " ", 
   RowBox[{"CellularAutomaton", "[", 
    RowBox[{"45", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", "0"}], "}"}], ",", "ngen2"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771862009015498*^9, 3.7718620220892525`*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"8d717bd0-78f8-499d-9d3e-dab4f8b378bc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DiagonalNeighborhoodPatternPeriod", "[", "diagnumber_", "]"}], ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"ca2", "[", 
        RowBox[{"[", 
         RowBox[{"x", "+", "diagnumber", "-", "1", "-", "1"}], "]"}], "]"}], 
       "[", 
       RowBox[{"[", 
        RowBox[{
         RowBox[{"Round", "[", 
          RowBox[{"ngen2", "/", "2"}], "]"}], "+", "1", "+", "diagnumber", 
         "-", "1", "-", 
         RowBox[{"Ceiling", "[", 
          RowBox[{"x", "/", "2"}], "]"}], "+", "1", "-", "1"}], "]"}], "]"}], 
      ",", 
      RowBox[{
       RowBox[{"ca2", "[", 
        RowBox[{"[", 
         RowBox[{"x", "+", "diagnumber", "-", "1", "-", "1"}], "]"}], "]"}], 
       "[", 
       RowBox[{"[", 
        RowBox[{
         RowBox[{"Round", "[", 
          RowBox[{"ngen2", "/", "2"}], "]"}], "+", "1", "+", "diagnumber", 
         "-", "1", "-", 
         RowBox[{"Ceiling", "[", 
          RowBox[{"x", "/", "2"}], "]"}], "+", "1"}], "]"}], "]"}], ",", 
      RowBox[{
       RowBox[{"ca2", "[", 
        RowBox[{"[", 
         RowBox[{"x", "+", "diagnumber", "-", "1", "-", "1"}], "]"}], "]"}], 
       "[", 
       RowBox[{"[", 
        RowBox[{
         RowBox[{"Round", "[", 
          RowBox[{"ngen2", "/", "2"}], "]"}], "+", "1", "+", "diagnumber", 
         "-", "1", "-", 
         RowBox[{"Ceiling", "[", 
          RowBox[{"x", "/", "2"}], "]"}], "+", "1", "+", "1"}], "]"}], 
       "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "2", ",", 
      RowBox[{"ngen2", "-", "diagnumber"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771861984128833*^9, 3.7718619859490128`*^9}, {
  3.771862025792939*^9, 3.771862069665491*^9}, {3.771862126357848*^9, 
  3.7718622226414857`*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"4c35b663-ffeb-4c62-854e-066673b0d616"],

Cell["\<\
As before, run FindTransientRepeat on the data (except now for neighborhoods).\
\>", "CodeText",
 CellChangeTimes->{{3.771900084108527*^9, 
  3.7719001133812547`*^9}},ExpressionUUID->"86a48077-f46d-4759-ad06-\
8d68e1de36f9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindTransientRepeat", "[", 
   RowBox[{
    RowBox[{"DiagonalNeighborhoodPatternPeriod", "[", "2", "]"}], ",", "2"}], 
   "]"}], "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.771862234450014*^9, 3.771862239513034*^9}, {
  3.771865219974869*^9, 3.7718652715250783`*^9}, {3.7718653997368345`*^9, 
  3.771865399819983*^9}, {3.7718694126997175`*^9, 3.7718694192769966`*^9}, {
  3.7718694661170406`*^9, 3.771869473195719*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"f9bd6bfc-c8a2-4e1d-a289-2413b69f540c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.771869420278395*^9, 3.771869475568489*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"7e6ca057-4e0c-4de1-a596-c09c40842948"]
}, Open  ]],

Cell[TextData[StyleBox["Periodicity of cell neighborhoods for a set of \
diagonals:", "CodeText"]], "Text",
 CellChangeTimes->{{3.771865491490702*^9, 3.771865493491011*^9}, {
  3.771899922391621*^9, 
  3.771899977009398*^9}},ExpressionUUID->"91fc1bb5-1872-4441-a166-\
785e11b6587e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "4", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", 
   ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", 
   "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", 
   ",", "8", ",", "8", ",", "8", ",", "16", ",", "16", ",", "16", ",", "16", 
   ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", 
   "16", ",", "16", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", 
   ",", "32", ",", "96", ",", "96", ",", "96", ",", "96", ",", "96", ",", 
   "96"}], "}"}]], "Output",
 CellChangeTimes->{
  3.771862241156122*^9, {3.771865228622011*^9, 3.771865272362156*^9}, 
   3.7718654011294403`*^9, 3.77186543622482*^9},
 CellLabel->"Out[49]=",ExpressionUUID->"e0700b92-deeb-44ce-8d94-cb5600eaeee1"],

Cell[TextData[StyleBox["Periodicity of cells for a set of diagonals:", \
"CodeText"]], "Text",
 CellChangeTimes->{{3.771865497098983*^9, 3.7718655061832824`*^9}, {
  3.771899911663365*^9, 3.7718999207274003`*^9}, {3.7718999685602818`*^9, 
  3.771899979870947*^9}},ExpressionUUID->"7df7fa99-e1e0-45b1-8d1b-\
40cc84481aa3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "4", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", 
   ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", 
   "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", 
   ",", "8", ",", "8", ",", "8", ",", "16", ",", "16", ",", "16", ",", "16", 
   ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", 
   "16", ",", "16", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", 
   ",", "32", ",", "32", ",", "96", ",", "96", ",", "96", ",", "96", ",", 
   "96"}], "}"}]], "Output",
 CellChangeTimes->{{3.7718654525427947`*^9, 3.771865473547152*^9}},
 CellLabel->"Out[51]=",ExpressionUUID->"efb45489-b07a-4eab-b612-f808262b8855"],

Cell["\<\
As seen in the data above, the neighborhoods exhibit very similar periodicity \
as the cells themselves for each diagonal. This makes sense because the cells \
that make up the neighborhoods are part of diagonals that have patterns, or \
repetitive structure. However, as seen in the data, there are a few \
discontinuities at the 45th (data has 32 & 96), 1st, and 3rd  elements. \
\>", "Text",
 CellChangeTimes->{{3.771900117507449*^9, 3.7719001634566035`*^9}, {
  3.771900210060685*^9, 
  3.7719003961311183`*^9}},ExpressionUUID->"28a74718-77f9-40e9-a23e-\
d111fd64934a"]
}, Closed]]
}, Closed]]
}, Open  ]]
},
WindowSize->{1280, 637},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
DockedCells->{
  Cell[
   TextData[{
     StyleBox["  WOLFRAM ", 
      RGBColor[0.97, 0.83, 0.35], FontFamily -> "Source Sans Pro", FontWeight -> 
      Bold, FontSize -> 40], 
     StyleBox["SUMMER SCHOOL", 
      GrayLevel[1], FontFamily -> "Source Sans Pro", FontSize -> 40], 
     StyleBox[" 2019", 
      RGBColor[0.97, 0.83, 0.35], FontFamily -> "Source Sans Pro", FontSize -> 
      40]}], CellFrameMargins -> 10, Background -> 
   RGBColor[0.12, 0.14, 0.15]]},
SpellingDictionaries->{"CorrectWords"->{
 "numgen", "diagnumber", "ndiagonal", "tbl", "repseq", "prdlist", "bpoints", 
  "condensedprddata", "numgenvisual"}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 388, 8, 156, "Title",ExpressionUUID->"80376cd3-4841-451d-969b-167a32f109e1"],
Cell[971, 32, 403, 6, 34, "Text",ExpressionUUID->"9a30e7bc-f63e-436b-be7b-a320f62675c5"],
Cell[1377, 40, 367, 6, 34, "Text",ExpressionUUID->"6ba6d97e-b3e8-4f04-b605-57ecc6147ef7"],
Cell[CellGroupData[{
Cell[1769, 50, 205, 3, 73, "Section",ExpressionUUID->"b1ced785-4242-4ede-846d-fa9507ada865"],
Cell[CellGroupData[{
Cell[1999, 57, 219, 5, 40, "Subsubsection",ExpressionUUID->"a4b82734-b453-42b7-8dc1-ae0a4f46a3aa"],
Cell[2221, 64, 1823, 27, 135, "Text",ExpressionUUID->"edaf1195-74f4-4e07-8647-583c3e762a21"],
Cell[4047, 93, 336, 7, 35, "CodeText",ExpressionUUID->"6e3a55d2-14fd-4513-933e-4f03c03c7e3d"],
Cell[CellGroupData[{
Cell[4408, 104, 251, 4, 26, "Input",ExpressionUUID->"31b1930d-8b9e-4ad2-83d4-dde71681d073"],
Cell[4662, 110, 7273, 143, 61, "Output",ExpressionUUID->"3254a8ab-9d59-4bf1-8650-d72d11e11ea7"]
}, Open  ]],
Cell[11950, 256, 374, 8, 35, "CodeText",ExpressionUUID->"485f9bb1-87f1-402b-9e77-93a19c1b0046"],
Cell[CellGroupData[{
Cell[12349, 268, 896, 16, 26, "Input",ExpressionUUID->"d983f915-0b0f-4c73-867a-341d536a3792"],
Cell[13248, 286, 188228, 3091, 536, "Output",ExpressionUUID->"bbaeec2b-da65-4cb9-bf59-78a7fea42ca8"]
}, Open  ]],
Cell[201491, 3380, 353, 7, 35, "CodeText",ExpressionUUID->"d242896d-9edd-485b-b2ed-d21158533010"],
Cell[CellGroupData[{
Cell[201869, 3391, 1066, 27, 26, "Input",ExpressionUUID->"e9b1bb08-b70e-4d45-8469-7dabf6b8bdb9"],
Cell[202938, 3420, 2740, 55, 239, "Output",ExpressionUUID->"012c250f-ad0c-4710-9c13-666cf4b8a546"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[205739, 3482, 232, 4, 53, "Section",ExpressionUUID->"ee7b8be8-ca0f-40a5-9563-45c8fab1cf55"],
Cell[205974, 3488, 1107, 20, 78, "Text",ExpressionUUID->"42f55d38-378b-4a03-87bd-b3b821d84e5b"],
Cell[CellGroupData[{
Cell[207106, 3512, 183, 3, 53, "Subsection",ExpressionUUID->"6ebaf530-6612-41b6-be36-3d75ebf6908a"],
Cell[207292, 3517, 383, 7, 37, "CodeText",ExpressionUUID->"7c4fa115-9afc-4e3a-a7a4-2ef94a62e5a9"],
Cell[CellGroupData[{
Cell[207700, 3528, 878, 17, 28, "Input",ExpressionUUID->"77c4fb15-035a-4a68-b29a-93330cbca5c7"],
Cell[208581, 3547, 3909, 70, 371, "Output",ExpressionUUID->"ddcaff70-9683-4b1a-9376-eac2f5426b4f"]
}, Open  ]],
Cell[212505, 3620, 824, 16, 57, "CodeText",ExpressionUUID->"8b23958c-1e06-489f-86d9-07cccdd49021"],
Cell[CellGroupData[{
Cell[213354, 3640, 431, 10, 28, "Input",ExpressionUUID->"6e8471fd-e2e0-4715-8bb2-ea47cfb57b2a"],
Cell[213788, 3652, 529, 9, 32, "Output",ExpressionUUID->"63788646-feb3-4350-a8ab-235b80a1dd6b"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[214366, 3667, 241, 4, 37, "Subsection",ExpressionUUID->"e1d05b93-fea1-46ab-8bb0-33434d7e194b"],
Cell[214610, 3673, 415, 10, 37, "CodeText",ExpressionUUID->"3abbe32d-50c1-473f-ae6c-fd719bf66bde"],
Cell[215028, 3685, 1985, 30, 28, "Input",ExpressionUUID->"cad9bc65-eb2d-48a4-97a9-cea37b20d165",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[217016, 3717, 257, 7, 37, "CodeText",ExpressionUUID->"956f9ef5-28af-4e75-a7c3-2b46a61e8d39"],
Cell[217276, 3726, 710, 16, 28, "Input",ExpressionUUID->"3d5ebd2c-87a1-408d-b60b-3e68ad1a8702",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[217989, 3744, 275, 7, 37, "CodeText",ExpressionUUID->"96382a08-b100-4e2e-b7f9-eee4b404f532"],
Cell[218267, 3753, 2519, 37, 28, "Input",ExpressionUUID->"5e01c1c4-412c-42b8-8e59-c33fea4e9893",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[220835, 3796, 237, 4, 53, "Section",ExpressionUUID->"eabf648e-db2b-4515-bdef-9163899c947f"],
Cell[221075, 3802, 808, 13, 78, "Text",ExpressionUUID->"e78dc475-8219-49f0-bc5d-067dc60251e7"],
Cell[CellGroupData[{
Cell[221908, 3819, 330, 5, 53, "Subsection",ExpressionUUID->"0e3ff1c1-a0a6-48eb-abee-2d4339869aae"],
Cell[222241, 3826, 299, 8, 35, "CodeText",ExpressionUUID->"1702e449-d82d-417c-96fd-c236ab64942a"],
Cell[222543, 3836, 2465, 36, 26, "Input",ExpressionUUID->"332b4660-0d72-4a4c-8e13-b2e280316254",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[225011, 3874, 281, 7, 35, "CodeText",ExpressionUUID->"7a82b5cb-6e23-4aa0-8fcc-b09fac1ef9e9"],
Cell[225295, 3883, 870, 16, 26, "Input",ExpressionUUID->"92311867-afc0-40a1-b5c3-aafc8d6181d2",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[226168, 3901, 598, 11, 54, "CodeText",ExpressionUUID->"ea5f2314-5607-4746-81eb-b55419b2e977"],
Cell[226769, 3914, 1532, 29, 26, "Input",ExpressionUUID->"0ec6ae16-9781-4fdd-846e-962ea7845791",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[228304, 3945, 12446, 278, 160, "Output",ExpressionUUID->"262ec183-bee8-4c93-a7fd-0a9ae4113e2b"],
Cell[240753, 4225, 569, 11, 54, "CodeText",ExpressionUUID->"88c37970-592e-4bdb-9cf0-54a9d2662e52"],
Cell[CellGroupData[{
Cell[241347, 4240, 1710, 47, 32, "Input",ExpressionUUID->"d0d7c20b-d702-472d-8db8-4a95bfbee563"],
Cell[243060, 4289, 4418, 117, 243, "Output",ExpressionUUID->"5a3d21b7-8685-4add-9040-23e547e87410"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[247527, 4412, 247, 4, 37, "Subsection",ExpressionUUID->"56807553-e44c-4113-9a3b-bff8d0e5bd0f"],
Cell[247777, 4418, 794, 16, 73, "CodeText",ExpressionUUID->"136ad488-00de-4806-82c3-1e971b630764"],
Cell[CellGroupData[{
Cell[248596, 4438, 641, 13, 26, "Input",ExpressionUUID->"d66697fa-0c93-49f3-905a-fa715a6f244b",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[249240, 4453, 1031, 15, 30, "Output",ExpressionUUID->"ffe5be4c-ba9b-4c16-b16c-b7f25765055a",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Open  ]],
Cell[250286, 4471, 466, 11, 35, "CodeText",ExpressionUUID->"7562e0d8-5f23-4bfb-841c-fcc7bb48092c"],
Cell[CellGroupData[{
Cell[250777, 4486, 413, 8, 26, "Input",ExpressionUUID->"afeab1dd-bc01-49db-9104-ba9326e7b0b0",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[251193, 4496, 746, 10, 30, "Output",ExpressionUUID->"9a567e5d-3817-42cc-87f0-b50e104c3d1b",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[251988, 4512, 374, 7, 37, "Subsection",ExpressionUUID->"641fa0e7-9f9e-42a7-8ab4-8cb87d0325bd"],
Cell[252365, 4521, 447, 10, 54, "CodeText",ExpressionUUID->"50cad2f2-6b80-4eb3-82c3-74e10d209c54"],
Cell[252815, 4533, 1477, 30, 26, "Input",ExpressionUUID->"a9f50038-f2f2-4db7-96c5-04177c8b28b5"],
Cell[CellGroupData[{
Cell[254317, 4567, 473, 7, 26, "Input",ExpressionUUID->"28ec88df-5df4-499a-9a46-be13e73674ec"],
Cell[254793, 4576, 149, 2, 30, "Output",ExpressionUUID->"108c7501-3e6e-4b8f-8dfa-629ae6518610"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[255003, 4585, 198, 3, 53, "Section",ExpressionUUID->"327433db-5723-42a8-810e-fdf74b015c19"],
Cell[255204, 4590, 1316, 21, 122, "Text",ExpressionUUID->"b6b1072f-f588-4bf0-8f6e-e6c83ed2a057"],
Cell[CellGroupData[{
Cell[256545, 4615, 774, 12, 53, "Subsection",ExpressionUUID->"1db36d7b-8b16-4533-aaaf-7a4699834ae4"],
Cell[257322, 4629, 750, 14, 57, "CodeText",ExpressionUUID->"ec1663f4-53ba-41f0-b33f-9fdcd1f81b68"],
Cell[258075, 4645, 1540, 25, 28, "Input",ExpressionUUID->"4272457a-0f11-4c85-9b60-c3f9d80ac91e"],
Cell[CellGroupData[{
Cell[259640, 4674, 308, 5, 28, "Input",ExpressionUUID->"15df06a4-8614-4c06-8ab1-0e9825c62762"],
Cell[259951, 4681, 1306, 19, 71, "Output",ExpressionUUID->"484b7c3a-48cb-4d6e-8ff0-116a69ae6bc7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[261294, 4705, 1646, 26, 67, "Input",ExpressionUUID->"7e3a7b77-ef58-44e8-9814-efeaecde178c"],
Cell[262943, 4733, 2019, 50, 246, "Output",ExpressionUUID->"b26e20bf-b67a-4669-836c-fa02018e51ea"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[265011, 4789, 757, 12, 37, "Subsection",ExpressionUUID->"ed7a26ef-5a89-465b-aee1-db60fb828246"],
Cell[265771, 4803, 393, 10, 37, "CodeText",ExpressionUUID->"871ab0b5-2cd4-4c21-8c8b-a6a8520a3dbb"],
Cell[266167, 4815, 564, 9, 28, "Input",ExpressionUUID->"63f701f7-d065-49b9-bfb5-f0f18e5fff62",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[266734, 4826, 597, 11, 57, "CodeText",ExpressionUUID->"fb9d4560-5864-47f5-8072-08c221338469"],
Cell[267334, 4839, 4240, 86, 105, "Input",ExpressionUUID->"239f62b4-21f8-499a-9899-f77ff12348b5",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[271577, 4927, 274, 7, 37, "CodeText",ExpressionUUID->"345a3087-fda6-47b4-b7ff-87f7a06a0502"],
Cell[CellGroupData[{
Cell[271876, 4938, 945, 18, 28, "Input",ExpressionUUID->"74f610a0-c81c-4892-bc76-23cae618cc61",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[272824, 4958, 461, 9, 28, "Input",ExpressionUUID->"a25119b2-5a2b-4c2c-a21c-eedba1dc842d",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Open  ]],
Cell[273300, 4970, 797, 13, 97, "CodeText",ExpressionUUID->"ca491561-b3e8-4a41-8d14-e0ec94d9881f"],
Cell[274100, 4985, 1644, 33, 48, "Input",ExpressionUUID->"47362c3f-643b-4a46-8c33-40737f61f703",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[275747, 5020, 677, 13, 157, "CodeText",ExpressionUUID->"08820c9b-61f7-4c71-b819-4045aa160acd"],
Cell[276427, 5035, 1169, 29, 28, "Input",ExpressionUUID->"d05a02f4-c231-485a-bfb5-9994c35454a9",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[277599, 5066, 726, 20, 32, "Output",ExpressionUUID->"5d076d7f-2c96-4eb2-96a1-17d580611087"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[278374, 5092, 451, 6, 53, "Section",ExpressionUUID->"26544d9a-058d-49a7-98fb-94c394cb96ba"],
Cell[CellGroupData[{
Cell[278850, 5102, 352, 5, 53, "Subsection",ExpressionUUID->"74f4376a-204b-4c1a-897f-c6634c26e476",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[279205, 5109, 1222, 20, 177, "CodeText",ExpressionUUID->"175de5fc-6bf8-491a-bf61-3040eff62655",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[280430, 5131, 1383, 21, 28, "Input",ExpressionUUID->"0c08d3c7-c792-48d4-8824-7bdba127cd06",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[281816, 5154, 759, 16, 28, "Input",ExpressionUUID->"6a13d7b3-adda-4bd1-8dfd-29bdf5850e8a",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[282578, 5172, 10086, 222, 238, "Input",ExpressionUUID->"a53572bd-7686-4c0e-9a7a-19b178cccd87",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[292667, 5396, 7664, 132, 863, "Output",ExpressionUUID->"c84e810e-0f50-4921-a459-de0a7543a028",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}]
}, Closed]],
Cell[CellGroupData[{
Cell[300368, 5533, 352, 6, 37, "Subsection",ExpressionUUID->"09199ace-f121-4a29-a921-219f7dbf4ad3",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.}],
Cell[300723, 5541, 336, 7, 37, "CodeText",ExpressionUUID->"b56128fd-a0b2-4efd-85df-e2e91b49f096",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.}],
Cell[301062, 5550, 1126, 18, 28, "Input",ExpressionUUID->"a18f4e36-51fa-4379-a01d-6b17c356ddfa",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.}],
Cell[302191, 5570, 733, 16, 28, "Input",ExpressionUUID->"e44baf7e-28a6-4053-9f9c-b49830da2217",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.}],
Cell[302927, 5588, 6122, 143, 143, "Input",ExpressionUUID->"73505491-3b3c-4cf6-9f9a-f5acc4e1c1fd",
 CellGroupingRules->{"GroupTogetherGrouping", 10002.}]
}, Closed]],
Cell[CellGroupData[{
Cell[309086, 5736, 350, 7, 37, "Subsection",ExpressionUUID->"ff8905d6-1e42-4c48-9845-f787dcd86ebe"],
Cell[309439, 5745, 330, 7, 37, "CodeText",ExpressionUUID->"76909845-5bd3-4569-b4bb-8318f400d251"],
Cell[309772, 5754, 279, 5, 28, "Input",ExpressionUUID->"6ddf87b2-c1f6-4917-89b0-daa89abe149c"],
Cell[310054, 5761, 395, 10, 28, "Input",ExpressionUUID->"8d717bd0-78f8-499d-9d3e-dab4f8b378bc"],
Cell[310452, 5773, 1895, 51, 86, "Input",ExpressionUUID->"4c35b663-ffeb-4c62-854e-066673b0d616"],
Cell[312350, 5826, 234, 5, 37, "CodeText",ExpressionUUID->"86a48077-f46d-4759-ad06-8d68e1de36f9"],
Cell[CellGroupData[{
Cell[312609, 5835, 561, 11, 28, "Input",ExpressionUUID->"f9bd6bfc-c8a2-4e1d-a289-2413b69f540c"],
Cell[313173, 5848, 472, 12, 32, "Output",ExpressionUUID->"7e6ca057-4e0c-4de1-a596-c09c40842948"]
}, Open  ]],
Cell[313660, 5863, 282, 5, 34, "Text",ExpressionUUID->"91fc1bb5-1872-4441-a166-785e11b6587e"],
Cell[313945, 5870, 827, 14, 32, "Output",ExpressionUUID->"e0700b92-deeb-44ce-8d94-cb5600eaeee1"],
Cell[314775, 5886, 321, 5, 34, "Text",ExpressionUUID->"7df7fa99-e1e0-45b1-8d1b-40cc84481aa3"],
Cell[315099, 5893, 755, 12, 32, "Output",ExpressionUUID->"efb45489-b07a-4eab-b612-f808262b8855"],
Cell[315857, 5907, 583, 10, 56, "Text",ExpressionUUID->"28a74718-77f9-40e9-a23e-d111fd64934a"]
}, Closed]]
}, Closed]]
}, Open  ]]
}
]
*)

